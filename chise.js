/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["chise"] = factory();
	else
		root["chise"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var chise = function chise(_options) {\n    var param = {};\n\n    // Access the libs\n    var libs = (__webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n    var options = optionUtilities.extendOptions(_options); // Extends the default options with the given options\n\n    // Create an sbgnviz instance\n    var sbgnvizInstanceUtilities = __webpack_require__(/*! ./utilities/sbgnviz-instance-utilities-factory */ \"./src/utilities/sbgnviz-instance-utilities-factory.js\")();\n    var sbgnvizInstance = sbgnvizInstanceUtilities(options);\n\n    // Register undo/redo actions\n    var registerUndoRedoActions = __webpack_require__(/*! ./utilities/register-undo-redo-actions-factory */ \"./src/utilities/register-undo-redo-actions-factory.js\")();\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n    var elementUtilitiesExtender = __webpack_require__(/*! ./utilities/element-utilities-extender-factory */ \"./src/utilities/element-utilities-extender-factory.js\")();\n    var undoRedoActionFunctionsExtender = __webpack_require__(/*! ./utilities/ur-action-functions-extender-factory */ \"./src/utilities/ur-action-functions-extender-factory.js\")();\n    var sifTopologyGrouping = __webpack_require__(/*! ./utilities/topology-grouping-factory */ \"./src/utilities/topology-grouping-factory.js\")();\n    var elementUtilities = sbgnvizInstance.elementUtilities;\n    var undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;\n    param.sbgnvizInstanceUtilities = sbgnvizInstanceUtilities;\n    param.optionUtilities = optionUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.sifTopologyGrouping = sifTopologyGrouping;\n    var shouldApply = function shouldApply() {\n      return param.elementUtilities.mapType === 'SIF';\n    };\n    undoRedoActionFunctionsExtender(param);\n    elementUtilitiesExtender(param);\n    registerUndoRedoActions(param);\n    mainUtilities(param);\n    sifTopologyGrouping(param, {\n      metaEdgeIdentifier: 'sif-meta',\n      lockGraphTopology: true,\n      shouldApply: shouldApply\n    });\n\n    // Expose the api\n    var api = {};\n\n    // Expose the properties inherited from sbgnviz\n    // then override some of these properties and expose some new properties\n    for (var prop in sbgnvizInstance) {\n      api[prop] = sbgnvizInstance[prop];\n    }\n\n    // Expose each main utility seperately\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    }\n\n    // Expose getSbgnvizInstance()\n    api.getSbgnvizInstance = sbgnvizInstanceUtilities.getInstance;\n\n    // Expose elementUtilities and undoRedoActionFunctions as is\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions;\n    api.sifTopologyGrouping = sifTopologyGrouping;\n    return api;\n  };\n\n  // Register chise with given libraries\n  chise.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.sbgnviz = _libs.sbgnviz || sbgnviz;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.sbgnviz.register(_libs); // Register sbgnviz with the given libs\n\n    // inherit exposed static properties of sbgnviz other than register\n    for (var prop in libs.sbgnviz) {\n      if (prop !== 'register') {\n        chise[prop] = libs.sbgnviz[prop];\n      }\n    }\n\n    // Set the libraries to access them from any file\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n    libUtilities.setLibs(libs);\n  };\n  if ( true && module.exports) {\n    module.exports = chise;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-extender-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/element-utilities-extender-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n// Extends sbgnviz.elementUtilities\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar jQuery = $ = libs.jQuery;\nmodule.exports = function () {\n  var options, sbgnvizInstance, elementUtilities, cy;\n  function elementUtilitiesExtender(param) {\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n    options = param.optionUtilities.getOptions();\n    elementUtilities = sbgnvizInstance.elementUtilities;\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    extend();\n\n    // Return the extended elementUtilities\n    return elementUtilities;\n  }\n\n  // Extends elementUtilities with chise specific facilities\n  function extend() {\n    // Section Start\n    // Add remove utilities\n\n    elementUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {\n      if (_typeof(nodeParams) != \"object\") {\n        var sbgnclass = nodeParams;\n      } else {\n        var sbgnclass = nodeParams[\"class\"];\n        var language = nodeParams.language;\n      }\n      var css = {};\n      //('sbgnclass', sbgnclass)\n      // if there is no specific default width or height for\n      // sbgnclass these sizes are used\n      var defaultWidth = 50;\n      var defaultHeight = 50;\n      if (visibility) {\n        css.visibility = visibility;\n      }\n      var data = {\n        \"class\": sbgnclass,\n        language: language,\n        bbox: {\n          w: defaultWidth,\n          h: defaultHeight,\n          x: x,\n          y: y\n        },\n        statesandinfos: [],\n        ports: []\n      };\n      if (id) {\n        data.id = id;\n      } else {\n        data.id = elementUtilities.generateNodeId();\n      }\n      if (parent) {\n        data.parent = parent;\n      }\n      this.extendNodeDataWithClassDefaults(data, sbgnclass);\n\n      // some defaults are not set by extendNodeDataWithClassDefaults()\n      var defaults = this.getDefaultProperties(sbgnclass);\n      if (defaults[\"multimer\"]) {\n        data[\"class\"] += \" multimer\";\n      }\n      if (defaults[\"clonemarker\"]) {\n        data[\"clonemarker\"] = true;\n      }\n      if (defaults[\"hypothetical\"]) {\n        data[\"class\"] = \"hypothetical \" + data[\"class\"];\n      }\n      if (defaults[\"active\"]) {\n        data[\"class\"] = \"active \" + data[\"class\"];\n      }\n      data.bbox[\"w\"] = defaults[\"width\"];\n      data.bbox[\"h\"] = defaults[\"height\"];\n      var eles = cy.add({\n        group: \"nodes\",\n        data: data,\n        css: css,\n        position: {\n          x: x,\n          y: y\n        }\n      });\n      var newNode = eles[eles.length - 1];\n      // Get the default ports ordering for the nodes with given sbgnclass\n      var ordering = defaults[\"ports-ordering\"];\n\n      // If there is a default ports ordering for the nodes with given sbgnclass and it is different than 'none' set the ports ordering to that ordering\n      if (ordering && ordering !== \"none\") {\n        this.setPortsOrdering(newNode, ordering);\n      }\n      if (language == \"AF\" && !elementUtilities.canHaveMultipleUnitOfInformation(newNode)) {\n        if (sbgnclass != \"BA plain\") {\n          // if AF node can have label i.e: not plain biological activity\n          var uoi_obj = {\n            clazz: \"unit of information\"\n          };\n          uoi_obj.label = {\n            text: \"\"\n          };\n          uoi_obj.bbox = {\n            w: 12,\n            h: 12\n          };\n          elementUtilities.addStateOrInfoBox(newNode, uoi_obj);\n        }\n      }\n\n      // node bg image was unexpectedly not rendered until it is clicked\n      // use this dirty hack until finding a solution to the problem\n      var bgImage = newNode.data(\"background-image\");\n      //alert('bgImage', bgImage)\n      if (bgImage) {\n        newNode.data(\"background-image\", bgImage);\n      }\n      return newNode;\n    };\n\n    //Saves old aux units of given node\n    elementUtilities.saveUnits = function (node) {\n      var tempData = [];\n      var index = 0;\n      node.data(\"statesandinfos\").forEach(function (ele) {\n        tempData.push({\n          x: ele.bbox.x,\n          y: ele.bbox.y,\n          anchorSide: ele.anchorSide\n        });\n        index++;\n      });\n      return tempData;\n    };\n\n    //Restores from given data\n    elementUtilities.restoreUnits = function (node, data) {\n      var index = 0;\n      node.data(\"statesandinfos\").forEach(function (ele) {\n        if (data !== undefined) {\n          ele.bbox.x = data[index].x;\n          ele.bbox.y = data[index].y;\n          var anchorSide = ele.anchorSide;\n          ele.anchorSide = data[index].anchorSide;\n          elementUtilities.modifyUnits(node, ele, anchorSide);\n          index++;\n        }\n      });\n    };\n\n    //Modify aux unit layouts\n    elementUtilities.modifyUnits = function (node, ele, anchorSide) {\n      instance.classes.AuxUnitLayout.modifyUnits(node, ele, anchorSide, cy);\n    };\n\n    //For reversible reactions both side of the process can be input/output\n    //Group ID identifies to which group of nodes the edge is going to be connected for reversible reactions(0: group 1 ID and 1:group 2 ID)\n    elementUtilities.addEdge = function (source, target, edgeParams, id, visibility, groupID) {\n      if (_typeof(edgeParams) != \"object\") {\n        var sbgnclass = edgeParams;\n      } else {\n        var sbgnclass = edgeParams[\"class\"];\n        var language = edgeParams.language;\n      }\n      var css = {};\n      if (visibility) {\n        css.visibility = visibility;\n      }\n      var data = {\n        source: source,\n        target: target,\n        \"class\": sbgnclass,\n        language: language\n      };\n      var defaults = elementUtilities.getDefaultProperties(sbgnclass);\n      // extend the data with default properties of edge style\n      Object.keys(defaults).forEach(function (prop) {\n        data[prop] = defaults[prop];\n      });\n      if (id) {\n        data.id = id;\n      } else {\n        data.id = elementUtilities.generateEdgeId();\n      }\n      if (elementUtilities.canHaveSBGNCardinality(sbgnclass)) {\n        data.cardinality = 0;\n      }\n      var sourceNode = cy.getElementById(source); // The original source node\n      var targetNode = cy.getElementById(target); // The original target node\n      var sourceHasPorts = sourceNode.data(\"ports\").length === 2;\n      var targetHasPorts = targetNode.data(\"ports\").length === 2;\n      // The portsource and porttarget variables\n      var portsource;\n      var porttarget;\n\n      /*\r\n       * Get input/output port id's of a node with the assumption that the node has valid ports.\r\n       */\n      var getIOPortIds = function getIOPortIds(node) {\n        var nodeInputPortId, nodeOutputPortId;\n        var nodePortsOrdering = sbgnvizInstance.elementUtilities.getPortsOrdering(node);\n        var nodePorts = node.data(\"ports\");\n        if (nodePortsOrdering === \"L-to-R\" || nodePortsOrdering === \"R-to-L\") {\n          var leftPortId = nodePorts[0].x < 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of left port is supposed to be negative\n          var rightPortId = nodePorts[0].x > 0 ? nodePorts[0].id : nodePorts[1].id; // The x value of right port is supposed to be positive\n          /*\r\n           * If the port ordering is left to right then the input port is the left port and the output port is the right port.\r\n           * Else if it is right to left it is vice versa\r\n           */\n          nodeInputPortId = nodePortsOrdering === \"L-to-R\" ? leftPortId : rightPortId;\n          nodeOutputPortId = nodePortsOrdering === \"R-to-L\" ? leftPortId : rightPortId;\n        } else if (nodePortsOrdering === \"T-to-B\" || nodePortsOrdering === \"B-to-T\") {\n          var topPortId = nodePorts[0].y < 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of top port is supposed to be negative\n          var bottomPortId = nodePorts[0].y > 0 ? nodePorts[0].id : nodePorts[1].id; // The y value of bottom port is supposed to be positive\n          /*\r\n           * If the port ordering is top to bottom then the input port is the top port and the output port is the bottom port.\r\n           * Else if it is right to left it is vice versa\r\n           */\n          nodeInputPortId = nodePortsOrdering === \"T-to-B\" ? topPortId : bottomPortId;\n          nodeOutputPortId = nodePortsOrdering === \"B-to-T\" ? topPortId : bottomPortId;\n        }\n\n        // Return an object containing the IO ports of the node\n        return {\n          inputPortId: nodeInputPortId,\n          outputPortId: nodeOutputPortId\n        };\n      };\n      // If at least one end of the edge has ports then we should determine the ports where the edge should be connected.\n      if (sourceHasPorts || targetHasPorts) {\n        var sourceNodeInputPortId, sourceNodeOutputPortId, targetNodeInputPortId, targetNodeOutputPortId;\n\n        // If source node has ports set the variables dedicated for its IO ports\n        if (sourceHasPorts) {\n          var ioPorts = getIOPortIds(sourceNode);\n          sourceNodeInputPortId = ioPorts.inputPortId;\n          sourceNodeOutputPortId = ioPorts.outputPortId;\n        }\n\n        // && (elementUtilities.isModulationArcClass(sbgnclass) && )\n        // If target node has ports set the variables dedicated for its IO ports\n        if (targetHasPorts && !(elementUtilities.isModulationArcClass(sbgnclass) && elementUtilities.isProcessNode(targetNode.data('class')))) {\n          var ioPorts = getIOPortIds(targetNode);\n          targetNodeInputPortId = ioPorts.inputPortId;\n          targetNodeOutputPortId = ioPorts.outputPortId;\n        }\n        if (sbgnclass === \"consumption\" || sbgnclass === \"translation consumption\" || sbgnclass === \"transcription consumption\") {\n          // A consumption edge should be connected to the input port of the target node which is supposed to be a process (any kind of)\n          portsource = sourceNodeOutputPortId;\n          porttarget = targetNodeInputPortId;\n        } else if (sbgnclass === \"production\" || sbgnclass === \"translation production\" || sbgnclass === \"transcription production\" || sbgnclass === \"transport\") {\n          // A production edge should be connected to the output port of the source node which is supposed to be a process (any kind of)\n          // A modulation edge may have a logical operator as source node in this case the edge should be connected to the output port of it\n          // The below assignment satisfy all of these condition\n          if (groupID == 0 || groupID == undefined) {\n            // groupID 0 for reversible reactions group 0\n            portsource = sourceNodeOutputPortId;\n            porttarget = targetNodeInputPortId;\n          } else {\n            //if reaction is reversible and edge belongs to group 1\n            portsource = sourceNodeInputPortId;\n          }\n        } else if (elementUtilities.isModulationArcClass(sbgnclass) || elementUtilities.isAFArcClass(sbgnclass) || elementUtilities.isSBMLArcClass(sbgnclass) || elementUtilities.isLogicArc(sbgnclass)) {\n          portsource = sourceNodeOutputPortId;\n          porttarget = targetNodeInputPortId;\n        }\n      }\n\n      // The default portsource/porttarget are the source/target themselves. If they are not set use these defaults.\n      // The portsource and porttarget are determined set them in data object.\n      data.portsource = portsource || source;\n      data.porttarget = porttarget || target;\n      var eles = cy.add({\n        group: \"edges\",\n        data: data,\n        css: css\n      });\n      var newEdge = eles[eles.length - 1];\n      return newEdge;\n    };\n    elementUtilities.addProcessWithConvenientEdges = function (_source, _target, nodeParams) {\n      // If source and target IDs are given get the elements by IDs\n      var source = typeof _source === \"string\" ? cy.getElementById(_source) : _source;\n      var target = typeof _target === \"string\" ? cy.getElementById(_target) : _target;\n\n      // Process parent should be the closest common ancestor of the source and target nodes\n      var processParent = cy.collection([source[0], target[0]]).commonAncestors().first();\n\n      // Process should be at the middle of the source and target nodes\n      var x = (source.position(\"x\") + target.position(\"x\")) / 2;\n      var y = (source.position(\"y\") + target.position(\"y\")) / 2;\n\n      // Create the process with given/calculated variables\n      var process = elementUtilities.addNode(x, y, nodeParams, undefined, processParent.id());\n      var xdiff = source.position(\"x\") - target.position(\"x\");\n      var ydiff = source.position(\"y\") - target.position(\"y\");\n      if (Math.abs(xdiff) >= Math.abs(ydiff)) {\n        if (xdiff < 0) elementUtilities.setPortsOrdering(process, \"L-to-R\");else elementUtilities.setPortsOrdering(process, \"R-to-L\");\n      } else {\n        if (ydiff < 0) elementUtilities.setPortsOrdering(process, \"T-to-B\");else elementUtilities.setPortsOrdering(process, \"B-to-T\");\n      }\n\n      // Create the edges one is between the process and the source node (which should be a consumption),\n      // the other one is between the process and the target node (which should be a production).\n      // For more information please refer to SBGN-PD reference card.\n      var edgeBtwSrc = elementUtilities.addEdge(source.id(), process.id(), {\n        \"class\": \"consumption\",\n        language: nodeParams.language\n      });\n      var edgeBtwTgt = elementUtilities.addEdge(process.id(), target.id(), {\n        \"class\": \"production\",\n        language: nodeParams.language\n      });\n\n      // Create a collection including the elements and to be returned\n      var collection = cy.collection([process[0], edgeBtwSrc[0], edgeBtwTgt[0]]);\n      return collection;\n    };\n\n    /*\r\n     * This method assumes that param.nodesToMakeCompound contains at least one node\r\n     * and all of the nodes including in it have the same parent. It creates a compound fot the given nodes an having the given type.\r\n     */\n    elementUtilities.createCompoundForGivenNodes = function (nodesToMakeCompound, compoundType) {\n      var oldParentId = nodesToMakeCompound[0].data(\"parent\");\n      var language = nodesToMakeCompound[0].data(\"language\");\n      // if nodesToMakeCompound contain both PD and AF nodes, then set language of compound as Unknown\n      for (var i = 1; i < nodesToMakeCompound.length; i++) {\n        if (nodesToMakeCompound[i] != language) {\n          language = \"Unknown\";\n          break;\n        }\n      }\n      // The parent of new compound will be the old parent of the nodes to make compound. x, y and id parameters are not set.\n      var newCompound = elementUtilities.addNode(undefined, undefined, {\n        \"class\": compoundType,\n        language: language\n      }, undefined, oldParentId);\n      var newCompoundId = newCompound.id();\n      var newEles = elementUtilities.changeParent(nodesToMakeCompound, newCompoundId);\n      newEles = newEles.union(newCompound);\n      return newEles;\n    };\n    elementUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"translation\");\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var yPosOfSourceAndSinkNode = processPosition.y;\n      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      sourceAndSinkNode.data(\"justAdded\", true);\n      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      consumptionEdge.data(\"justAdded\", true);\n      var xPosOfmRnaNode = processPosition.x;\n      var yPosOfmRnaNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;\n      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPosOfmRnaNode, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      mRnaNode.data(\"justAdded\", true);\n      mRnaNode.data(\"label\", mRnaName);\n      var infoboxObjectOfGene = {\n        clazz: \"unit of information\",\n        label: {\n          text: \"ct:mRNA\"\n        },\n        bbox: {\n          w: 45,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfGene);\n      var necessaryStimulationEdge = elementUtilities.addEdge(mRnaNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      necessaryStimulationEdge.data(\"justAdded\", true);\n      var xPosOfProteinNode = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPostOfProteinNode = processPosition.y;\n      var proteinNode = elementUtilities.addNode(xPosOfProteinNode, yPostOfProteinNode, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      proteinNode.data(\"justAdded\", true);\n      proteinNode.data(\"label\", proteinName);\n      var productionEdge = elementUtilities.addEdge(processNode.id(), proteinNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      productionEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    elementUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"transcription\");\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var xPosOfSourceAndSinkNode = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var yPosOfSourceAndSinkNode = processPosition.y;\n      var sourceAndSinkNode = elementUtilities.addNode(xPosOfSourceAndSinkNode, yPosOfSourceAndSinkNode, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      sourceAndSinkNode.data(\"justAdded\", true);\n      var consumptionEdge = elementUtilities.addEdge(sourceAndSinkNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      consumptionEdge.data(\"justAdded\", true);\n      var xPosOfGeneNode = processPosition.x;\n      var yPosOfGeneNode = processPosition.y - edgeLength - processHeight / 2 - nucleicAcidFeatureHeight / 2;\n      var geneNode = elementUtilities.addNode(xPosOfGeneNode, yPosOfGeneNode, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      geneNode.data(\"justAdded\", true);\n      geneNode.data(\"label\", geneName);\n      var infoboxObjectOfGene = {\n        clazz: \"unit of information\",\n        label: {\n          text: \"ct:gene\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(geneNode, infoboxObjectOfGene);\n      var necessaryStimulationEdge = elementUtilities.addEdge(geneNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      necessaryStimulationEdge.data(\"justAdded\", true);\n      var xPosOfmRnaNode = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;\n      var yPostOfmRnaNode = processPosition.y;\n      var mRnaNode = elementUtilities.addNode(xPosOfmRnaNode, yPostOfmRnaNode, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      mRnaNode.data(\"justAdded\", true);\n      mRnaNode.data(\"label\", mRnaName);\n      var infoboxObjectOfmRna = {\n        clazz: \"unit of information\",\n        label: {\n          text: \"ct:mRNA\"\n        },\n        bbox: {\n          w: 45,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(mRnaNode, infoboxObjectOfmRna);\n      var productionEdge = elementUtilities.addEdge(processNode.id(), mRnaNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      productionEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    elementUtilities.rotate90 = function (point, center) {\n      var relativeX = center.x - point.x;\n      var relativeY = center.y - point.y;\n      var relativeRotatedX = relativeY;\n      var relativeRotatedY = -1 * relativeX;\n      var resultX = relativeRotatedX + center.x;\n      var resultY = relativeRotatedY + center.y;\n      return {\n        x: resultX,\n        y: resultY\n      };\n    };\n    elementUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultMacromoleculePropeties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"process\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var macromoleculeWidth = defaultMacromoleculePropeties.width || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 15;\n      var widthPerChar = 6;\n      var regulatorInfoboxLabel = \"ct:mRNA\";\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", label);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", outputLabel);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      var xPosOfRegulator = processPosition.x;\n      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;\n      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);\n      nodePosition = {\n        x: xPosOfRegulator,\n        y: yPosOfRegulator\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      regulatorNode.data(\"justAdded\", true);\n      regulatorNode.data(\"label\", regulatorLabel);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: regulatorInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      regulatorEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createTranscription = function (label, orientation) {\n      var defaultSourceAndSinkProperties = elementUtilities.getDefaultProperties(\"empty set\");\n      var defaultNucleicAcidFeatureProperties = elementUtilities.getDefaultProperties(\"nucleic acid feature\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"process\");\n      var sourceAndSinkWidth = defaultSourceAndSinkProperties.width || 50;\n      var nucleicAcidFeatureWidth = defaultNucleicAcidFeatureProperties.width || 50;\n      var nucleicAcidFeatureHeight = defaultNucleicAcidFeatureProperties.height || 50;\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 15;\n      var widthPerChar = 6;\n      var outputInfoboxLabel = \"ct:mRNA\";\n      var regulatorInfoboxLabel = \"ct:gene\";\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - sourceAndSinkWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + nucleicAcidFeatureWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", label);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: outputInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(outputInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      var xPosOfRegulator = processPosition.x;\n      var dimension = vertical ? nucleicAcidFeatureWidth : nucleicAcidFeatureHeight;\n      var yPosOfRegulator = processPosition.y - (processHeight / 2 + dimension / 2 + edgeLength);\n      nodePosition = {\n        x: xPosOfRegulator,\n        y: yPosOfRegulator\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"nucleic acid feature\",\n        language: \"PD\"\n      });\n      regulatorNode.data(\"justAdded\", true);\n      regulatorNode.data(\"label\", label);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: regulatorInfoboxLabel\n        },\n        bbox: {\n          w: Math.max(regulatorInfoboxLabel.length * widthPerChar, minInfoboxDimension),\n          h: minInfoboxDimension\n        }\n      };\n      elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n      var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n        \"class\": \"necessary stimulation\",\n        language: \"PD\"\n      });\n      regulatorEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createDegradation = function (macromolecule, orientation) {\n      var macromoleculeName = macromolecule.name;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var vertical = orientation === \"vertical\";\n      var processPortsOrdering = vertical ? \"T-to-B\" : \"L-to-R\";\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (vertical) {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"empty set\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {\n      var hasRegulator = regulator.name !== undefined;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var tilingPaddingVertical = 15;\n      var tilingPaddingHorizontal = 15;\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var offsetX = processWidth / 2 + edgeLength + macromoleculeWidth / 2;\n      var xPosOfProtein = reverse ? processPosition.x + offsetX : processPosition.x - offsetX;\n      var proteinCount = proteinLabels.length;\n      var macromoleculeDimension = orientation === \"vertical\" ? macromoleculeWidth : macromoleculeHeight;\n      var stepOffset = macromoleculeDimension + tilingPaddingVertical;\n      var offsetY = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingVertical);\n      var horizontalOffsetX = (proteinCount - 1) / 2 * (macromoleculeDimension + tilingPaddingHorizontal);\n      var yPosOfProtein = processPosition.y - offsetY;\n      proteinLabels.forEach(function (label) {\n        var nodePosition = {\n          x: xPosOfProtein,\n          y: yPosOfProtein\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": \"macromolecule\",\n          language: \"PD\"\n        });\n        node.data(\"label\", label);\n        node.data(\"justAdded\", true);\n        yPosOfProtein += stepOffset;\n        var source = reverse ? processNode.id() : node.id();\n        var target = reverse ? node.id() : processNode.id();\n        var edgeClass = reverse ? \"production\" : \"consumption\";\n        var edge = elementUtilities.addEdge(source, target, {\n          \"class\": edgeClass,\n          language: \"PD\"\n        });\n        edge.data(\"justAdded\", true);\n      });\n      var complexPos = {\n        x: processPosition.x + (reverse ? -1 : 1) * offsetX,\n        y: processPosition.y\n      };\n      if (orientation === \"vertical\") {\n        complexPos = elementUtilities.rotate90(complexPos, processPosition);\n      }\n      var complex = elementUtilities.addNode(complexPos.x, complexPos.y, {\n        \"class\": \"complex\",\n        language: \"PD\"\n      });\n      complex.data(\"label\", complexLabel);\n      complex.data(\"justAdded\", true);\n      var source = reverse ? complex.id() : processNode.id();\n      var target = reverse ? processNode.id() : complex.id();\n      var edgeClass = reverse ? \"consumption\" : \"production\";\n      var complexEdge = elementUtilities.addEdge(source, target, {\n        \"class\": edgeClass,\n        language: \"PD\"\n      });\n      complexEdge.data(\"justAdded\", true);\n      if (orientation === \"vertical\") {\n        xPosOfProtein = complex.position(\"x\") - horizontalOffsetX;\n        yPosOfProtein = complex.position(\"y\");\n      } else {\n        xPosOfProtein = complex.position(\"x\");\n        yPosOfProtein = complex.position(\"y\") - offsetY;\n      }\n      proteinLabels.forEach(function (label) {\n        var nodePosition = {\n          x: xPosOfProtein,\n          y: yPosOfProtein\n        };\n        var node = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": \"macromolecule\",\n          language: \"PD\"\n        }, undefined, complex.id());\n        node.data(\"label\", label);\n        node.data(\"justAdded\", true);\n        if (orientation === \"vertical\") {\n          xPosOfProtein += stepOffset;\n        } else {\n          yPosOfProtein += stepOffset;\n        }\n      });\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var regulatorEdgeType = regulator.edgeType;\n        var regulatorMultimer = regulator.multimer;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var cardinality = regulatorMultimer.cardinality;\n          if (cardinality != \"\") {\n            var infoboxLabel = \"N:\" + cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: infoboxLabel\n              },\n              bbox: {\n                w: infoboxLabel.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": regulatorEdgeType,\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {\n      var hasRegulator = regulator.name !== undefined;\n      var macromoleculeName = macromolecule.name;\n      var macromoleculeMultimerCardinality = macromolecule.cardinality;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      var cardinality = macromoleculeMultimerCardinality;\n      if (cardinality !== \"\") {\n        inputEdge.data(\"cardinality\", cardinality);\n      }\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", macromoleculeName);\n      elementUtilities.setMultimerStatus(outputNode, true);\n      if (cardinality !== \"\") {\n        var infoboxLabel = \"N:\" + cardinality;\n        infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: infoboxLabel\n          },\n          bbox: {\n            w: infoboxLabel.length * widthPerChar,\n            h: minInfoboxDimension\n          }\n        };\n        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      }\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var regulatorEdgeType = regulator.edgeType;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var _cardinality = regulatorMultimer.cardinality;\n          if (_cardinality != \"\") {\n            var _infoboxLabel = \"N:\" + _cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: _infoboxLabel\n              },\n              bbox: {\n                w: _infoboxLabel.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": regulatorEdgeType,\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {\n      var hasRegulator = regulator.name !== undefined;\n      var macromoleculeName = macromolecule.name;\n      var macromoleculeIsMultimer = macromolecule.multimer.enabled;\n      var macromoleculeMultimerCardinality = macromolecule.multimer.cardinality;\n      var defaultMacromoleculeProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculeProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculeProperties.height || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = 30;\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var minInfoboxDimension = 20;\n      var widthPerChar = 6;\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var yPosOfInput = processPosition.y;\n      var yPosOfOutput = processPosition.y;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var nodePosition = {\n        x: xPosOfInput,\n        y: yPosOfInput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var inputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", macromoleculeName);\n      if (macromoleculeIsMultimer) {\n        elementUtilities.setMultimerStatus(inputNode, true);\n        var cardinality = macromoleculeMultimerCardinality;\n        if (cardinality != \"\") {\n          var infoboxLabel = \"N:\" + cardinality;\n          infoboxObject = {\n            clazz: \"unit of information\",\n            label: {\n              text: infoboxLabel\n            },\n            bbox: {\n              w: infoboxLabel.length * widthPerChar,\n              h: minInfoboxDimension\n            }\n          };\n          elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n        }\n      }\n      inputInfoboxLabels.forEach(function (label) {\n        var inputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;\n        var infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: label\n          },\n          bbox: {\n            w: inputInfoboxWidth,\n            h: minInfoboxDimension\n          },\n          style: {\n            \"shape-name\": \"ellipse\"\n          }\n        };\n        elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n      });\n      var inputEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputEdge.data(\"justAdded\", true);\n      nodePosition = {\n        x: xPosOfOutput,\n        y: yPosOfOutput\n      };\n      if (orientation === \"vertical\") {\n        nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n      }\n      var outputNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", macromoleculeName);\n      if (macromoleculeIsMultimer) {\n        elementUtilities.setMultimerStatus(outputNode, true);\n        var _cardinality2 = macromoleculeMultimerCardinality;\n        if (_cardinality2 != \"\") {\n          var _infoboxLabel2 = \"N:\" + _cardinality2;\n          infoboxObject = {\n            clazz: \"unit of information\",\n            label: {\n              text: _infoboxLabel2\n            },\n            bbox: {\n              w: _infoboxLabel2.length * widthPerChar,\n              h: minInfoboxDimension\n            }\n          };\n          elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n        }\n      }\n      outputInfoboxLabels.forEach(function (label) {\n        var outputInfoboxWidth = label.length > 0 ? Math.max(widthPerChar * label.length, minInfoboxDimension) : minInfoboxDimension;\n        infoboxObject = {\n          clazz: \"unit of information\",\n          label: {\n            text: label\n          },\n          bbox: {\n            w: outputInfoboxWidth,\n            h: minInfoboxDimension\n          },\n          style: {\n            \"shape-name\": \"ellipse\"\n          }\n        };\n        elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      });\n      [inputNode, outputNode].forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        elementUtilities.resizeNodes(node, width, macromoleculeHeight, false, true);\n      });\n      if (orientation === \"horizontal\") {\n        var newInputXPos = processPosition.x - edgeLength - processWidth / 2 - inputNode.data(\"bbox\").w / 2;\n        inputNode.position(\"x\", newInputXPos);\n        var newOutputXPos = processPosition.x + edgeLength + processWidth / 2 + outputNode.data(\"bbox\").w / 2;\n        outputNode.position(\"x\", newOutputXPos);\n      } else {\n        var newInputYPos = processPosition.y - edgeLength - processWidth / 2 - inputNode.data(\"bbox\").h / 2;\n        inputNode.position(\"y\", newInputYPos);\n        var newOutputYPos = processPosition.y + edgeLength + processWidth / 2 + outputNode.data(\"bbox\").h / 2;\n        outputNode.position(\"y\", newOutputYPos);\n      }\n      var outputEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputEdge.data(\"justAdded\", true);\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = elementUtilities.rotate90(nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var _cardinality3 = regulatorMultimer.cardinality;\n          if (_cardinality3 != \"\") {\n            var _infoboxLabel3 = \"N:\" + _cardinality3;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: _infoboxLabel3\n              },\n              bbox: {\n                w: _infoboxLabel3.length * widthPerChar,\n                h: minInfoboxDimension\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": \"catalysis\",\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {\n      var rotate90 = function rotate90(point, center) {\n        var relativeX = center.x - point.x;\n        var relativeY = center.y - point.y;\n        var relativeRotatedX = relativeY;\n        var relativeRotatedY = -1 * relativeX;\n        var resultX = relativeRotatedX + center.x;\n        var resultY = relativeRotatedY + center.y;\n        return {\n          x: resultX,\n          y: resultY\n        };\n      };\n      var hasRegulator = regulator.name !== undefined;\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultRegulatorProperties = hasRegulator ? elementUtilities.getDefaultProperties(regulator.type) : {};\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;\n      var regulatorHeight = defaultRegulatorProperties.height || 50;\n      var processPosition = elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var tilingPaddingVertical = 15;\n      var edgeLength = 30;\n      var processLeftSideEdgeType = reversible ? \"production\" : \"consumption\";\n      var processRightSideEdgeType = \"production\";\n      var processPortsOrdering = orientation === \"vertical\" ? \"T-to-B\" : \"L-to-R\";\n      var multimerOffset = 6;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - simpleChemicalWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + simpleChemicalWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, processPortsOrdering);\n      processNode.data(\"justAdded\", true);\n      var numOfInputNodes = inputs.length;\n      var numOfOutputNodes = outputs.length;\n      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);\n      inputs.forEach(function (data, index) {\n        var nodeName = data.name;\n        var nodeType = data.type;\n        if (index === 0) {\n          yPosOfInput = processPosition.y;\n        } else if (index % 2 === 1) {\n          yPosOfInput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);\n        } else {\n          yPosOfInput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);\n        }\n        var nodePosition = {\n          x: xPosOfInput,\n          y: yPosOfInput\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = rotate90(nodePosition, processPosition);\n        }\n        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": nodeType.toLowerCase(),\n          language: \"PD\"\n        });\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeName);\n        var newEdge;\n        if (reversible) {\n          newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n            \"class\": processLeftSideEdgeType,\n            language: \"PD\"\n          }, undefined, undefined, 1);\n        } else {\n          newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {\n            \"class\": processLeftSideEdgeType,\n            language: \"PD\"\n          });\n        }\n        newEdge.data(\"justAdded\", true);\n      });\n      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (simpleChemicalHeight + tilingPaddingVertical);\n      outputs.forEach(function (data, index) {\n        var nodeName = data.name;\n        var nodeType = data.type;\n        if (index === 0) {\n          yPosOfOutput = processPosition.y;\n        } else if (index % 2 === 1) {\n          yPosOfOutput = processPosition.y - (simpleChemicalHeight + tilingPaddingVertical) * Math.ceil(index / 2);\n        } else {\n          yPosOfOutput = processPosition.y + (simpleChemicalHeight + tilingPaddingVertical) * (index / 2);\n        }\n        var nodePosition = {\n          x: xPosOfOutput,\n          y: yPosOfOutput\n        };\n        if (orientation === \"vertical\") {\n          nodePosition = rotate90(nodePosition, processPosition);\n        }\n        var newNode = elementUtilities.addNode(nodePosition.x, nodePosition.y, {\n          \"class\": nodeType.toLowerCase(),\n          language: \"PD\"\n        });\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeName);\n        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n          \"class\": processRightSideEdgeType,\n          language: \"PD\"\n        }, undefined, undefined, 0);\n        newEdge.data(\"justAdded\", true);\n      });\n\n      // add regulator node\n      if (hasRegulator) {\n        var regulatorName = regulator.name;\n        var regulatorType = regulator.type;\n        var xPosOfRegulator = processPosition.x;\n        if (regulatorMultimer.enabled && orientation === \"horizontal\") {\n          xPosOfRegulator -= multimerOffset;\n        }\n        var yPosOfRegulator = processPosition.y - (processHeight / 2 + regulatorHeight / 2 + edgeLength);\n        var _nodePosition = {\n          x: xPosOfRegulator,\n          y: yPosOfRegulator\n        };\n        if (orientation === \"vertical\") {\n          _nodePosition = rotate90(_nodePosition, processPosition);\n        }\n        var regulatorNode = elementUtilities.addNode(_nodePosition.x, _nodePosition.y, {\n          \"class\": regulatorType,\n          language: \"PD\"\n        });\n        regulatorNode.data(\"justAdded\", true);\n        regulatorNode.data(\"label\", regulatorName);\n        if (regulatorMultimer.enabled) {\n          elementUtilities.setMultimerStatus(regulatorNode, true);\n          var cardinality = regulatorMultimer.cardinality;\n          if (cardinality != \"\") {\n            var infoboxLabel = \"N:\" + cardinality;\n            infoboxObject = {\n              clazz: \"unit of information\",\n              label: {\n                text: infoboxLabel\n              },\n              bbox: {\n                w: infoboxLabel.length * 6,\n                h: 15\n              }\n            };\n            elementUtilities.addStateOrInfoBox(regulatorNode, infoboxObject);\n          }\n        }\n        var regulatorEdge = elementUtilities.addEdge(regulatorNode.id(), processNode.id(), {\n          \"class\": \"catalysis\",\n          language: \"PD\"\n        });\n        regulatorEdge.data(\"justAdded\", true);\n      }\n      cy.endBatch();\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles;\n    };\n    elementUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultCatalystTypeProperties = elementUtilities.getDefaultProperties(catalystType);\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"catalytic\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var processHeight = defaultProcessProperties.height || 50;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;\n      var catalystHeight = defaultCatalystTypeProperties.height || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var tilingPaddingVertical = tilingPaddingVertical || 15;\n      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var numOfInputNodes = inputNodeList.length;\n      var numOfOutputNodes = outputNodeList.length;\n      var yPosOfInput = processPosition.y - (numOfInputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n      // add input side nodes\n      for (var i = 0; i < numOfInputNodes; i++) {\n        if (inputNodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {\n            \"class\": \"simple chemical\",\n            language: \"PD\"\n          });\n          yPosOfInput += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPosOfInput, yPosOfInput, {\n            \"class\": \"macromolecule\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosOfInput += macromoleculeHeight + tilingPaddingVertical;\n        }\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", inputNodeList[i].name);\n        var newEdge = elementUtilities.addEdge(newNode.id(), processNode.id(), {\n          \"class\": \"consumption\",\n          language: \"PD\"\n        });\n        newEdge.data(\"justAdded\", true);\n      }\n      var yPosOfOutput = processPosition.y - (numOfOutputNodes - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n      // add output side nodes\n      for (var i = 0; i < numOfOutputNodes; i++) {\n        if (outputNodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {\n            \"class\": \"simple chemical\",\n            language: \"PD\"\n          });\n          yPosOfOutput += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPosOfOutput, yPosOfOutput, {\n            \"class\": \"macromolecule\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosOfOutput += macromoleculeHeight + tilingPaddingVertical;\n        }\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", outputNodeList[i].name);\n        var newEdge = elementUtilities.addEdge(processNode.id(), newNode.id(), {\n          \"class\": \"production\",\n          language: \"PD\"\n        });\n        newEdge.data(\"justAdded\", true);\n      }\n\n      // add catalyst node\n      var xPosOfCatalyst = processPosition.x;\n      var yPosOfCatalyst = processPosition.y - (processHeight + catalystHeight + tilingPaddingVertical);\n      var catalystNode = elementUtilities.addNode(xPosOfCatalyst, yPosOfCatalyst, {\n        \"class\": catalystType,\n        language: \"PD\"\n      });\n      catalystNode.data(\"justAdded\", true);\n      catalystNode.data(\"label\", catalystName);\n      var catalystEdge = elementUtilities.addEdge(catalystNode.id(), processNode.id(), {\n        \"class\": \"catalysis\",\n        language: \"PD\"\n      });\n      catalystEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n    elementUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(\"activation\");\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPosOfInput = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      var xPosOfOutput = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      var processNode = elementUtilities.addNode(processPosition.x, processPosition.y, {\n        \"class\": \"process\",\n        language: \"PD\"\n      });\n      elementUtilities.setPortsOrdering(processNode, \"L-to-R\");\n      processNode.data(\"justAdded\", true);\n      var yPosition = processPosition.y;\n      var inputNode = elementUtilities.addNode(xPosOfInput, yPosition, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      inputNode.data(\"justAdded\", true);\n      inputNode.data(\"label\", proteinName);\n      var infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: reverse ? \"active\" : \"inactive\"\n        },\n        style: {\n          \"shape-name\": \"ellipse\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(inputNode, infoboxObject);\n      var outputNode = elementUtilities.addNode(xPosOfOutput, yPosition, {\n        \"class\": \"macromolecule\",\n        language: \"PD\"\n      });\n      outputNode.data(\"justAdded\", true);\n      outputNode.data(\"label\", proteinName);\n      infoboxObject = {\n        clazz: \"unit of information\",\n        label: {\n          text: reverse ? \"inactive\" : \"active\"\n        },\n        style: {\n          \"shape-name\": \"ellipse\"\n        },\n        bbox: {\n          w: 36,\n          h: 15\n        }\n      };\n      elementUtilities.addStateOrInfoBox(outputNode, infoboxObject);\n      var inputSideEdge = elementUtilities.addEdge(inputNode.id(), processNode.id(), {\n        \"class\": \"consumption\",\n        language: \"PD\"\n      });\n      inputSideEdge.data(\"justAdded\", true);\n      var outputSideEdge = elementUtilities.addEdge(processNode.id(), outputNode.id(), {\n        \"class\": \"production\",\n        language: \"PD\"\n      });\n      outputSideEdge.data(\"justAdded\", true);\n      cy.endBatch();\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    /*\r\n     * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\r\n     * in the complex. Parameters are explained below.\r\n     * templateType: The type of the template reaction. It may be 'association', 'dissociation', 'reversible' or 'irreversible'.\r\n     * nodeList: The list of the names and types of molecules which will involve in the reaction.\r\n     * complexName: The name of the complex in the reaction.\r\n     * processPosition: The modal position of the process in the reaction. The default value is the center of the canvas.\r\n     * tilingPaddingVertical: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.\r\n     * tilingPaddingHorizontal: This option will be passed to the cose-bilkent layout with the same name. The default value is 15.\r\n     * edgeLength: The distance between the process and the macromolecules at the both sides.\r\n     */\n    elementUtilities.createTemplateReaction = function (templateType, nodeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {\n      var defaultMacromoleculProperties = elementUtilities.getDefaultProperties(\"macromolecule\");\n      var defaultSimpleChemicalProperties = elementUtilities.getDefaultProperties(\"simple chemical\");\n      var defaultProcessProperties = elementUtilities.getDefaultProperties(templateType);\n      var processWidth = defaultProcessProperties.width || 50;\n      var macromoleculeWidth = defaultMacromoleculProperties.width || 50;\n      var macromoleculeHeight = defaultMacromoleculProperties.height || 50;\n      var simpleChemicalWidth = defaultSimpleChemicalProperties.width || 35;\n      var simpleChemicalHeight = defaultSimpleChemicalProperties.height || 35;\n      var processPosition = processPosition || elementUtilities.convertToModelPosition({\n        x: cy.width() / 2,\n        y: cy.height() / 2\n      });\n      var nodeList = nodeList;\n      var complexName = complexName;\n      var numOfMolecules = nodeList.length;\n      var tilingPaddingVertical = tilingPaddingVertical || 15;\n      var tilingPaddingHorizontal = tilingPaddingHorizontal || 15;\n      var edgeLength = edgeLength || 60;\n      cy.startBatch();\n      if (!elementUtilities.getMapType()) {\n        elementUtilities.setMapType(\"PD\");\n      }\n      var xPositionOfFreeMacromolecules;\n      var xPositionOfInputMacromolecules;\n      if (templateType === \"association\") {\n        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n      } else if (templateType === \"dissociation\") {\n        xPositionOfFreeMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      } else {\n        xPositionOfFreeMacromolecules = processPosition.x - edgeLength - processWidth / 2 - macromoleculeWidth / 2;\n        xPositionOfInputMacromolecules = processPosition.x + edgeLength + processWidth / 2 + macromoleculeWidth / 2;\n      }\n\n      //Create the process in template type\n      var process;\n      if (templateType === \"reversible\" || templateType === \"irreversible\") {\n        process = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": \"process\",\n          language: \"PD\"\n        });\n        elementUtilities.setPortsOrdering(process, \"L-to-R\");\n      } else {\n        process = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": templateType,\n          language: \"PD\"\n        });\n        elementUtilities.setPortsOrdering(process, \"L-to-R\");\n      }\n      process.data(\"justAdded\", true);\n\n      //Define the starting y position\n      var yPosition = processPosition.y - (numOfMolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n\n      //Create the free molecules\n      for (var i = 0; i < numOfMolecules; i++) {\n        // node addition operation is determined by molecule type\n        if (nodeList[i].type == \"Simple Chemical\") {\n          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {\n            \"class\": \"simple chemical\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosition += simpleChemicalHeight + tilingPaddingVertical;\n        } else {\n          var newNode = elementUtilities.addNode(xPositionOfFreeMacromolecules, yPosition, {\n            \"class\": \"macromolecule\",\n            language: \"PD\"\n          });\n          //update the y position\n          yPosition += macromoleculeHeight + tilingPaddingVertical;\n        }\n        newNode.data(\"justAdded\", true);\n        newNode.data(\"label\", nodeList[i].name);\n\n        //create the edge connected to the new molecule\n        var newEdge;\n        if (templateType === \"association\") {\n          newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {\n            \"class\": \"consumption\",\n            language: \"PD\"\n          });\n        } else if (templateType === \"dissociation\") {\n          newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n            \"class\": \"production\",\n            language: \"PD\"\n          });\n        } else {\n          //Group right or top elements in group id 1\n          if (templateType === \"irreversible\") {\n            newEdge = elementUtilities.addEdge(newNode.id(), process.id(), {\n              \"class\": \"consumption\",\n              language: \"PD\"\n            });\n          } else {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: \"PD\"\n            }, undefined, undefined, 1);\n          }\n        }\n        newEdge.data(\"justAdded\", true);\n      }\n      if (templateType === \"association\" || templateType == \"dissociation\") {\n        //Create the complex including macromolecules inside of it\n        //Temprorarily add it to the process position we will move it according to the last size of it\n        var complex = elementUtilities.addNode(processPosition.x, processPosition.y, {\n          \"class\": \"complex\",\n          language: \"PD\"\n        });\n        complex.data(\"justAdded\", true);\n        complex.data(\"justAddedLayoutNode\", true);\n\n        //If a name is specified for the complex set its label accordingly\n        if (complexName) {\n          complex.data(\"label\", complexName);\n        }\n\n        //create the edge connnected to the complex\n        var edgeOfComplex;\n        if (templateType === \"association\") {\n          edgeOfComplex = elementUtilities.addEdge(process.id(), complex.id(), {\n            \"class\": \"production\",\n            language: \"PD\"\n          });\n        } else {\n          edgeOfComplex = elementUtilities.addEdge(complex.id(), process.id(), {\n            \"class\": \"consumption\",\n            language: \"PD\"\n          });\n        }\n        edgeOfComplex.data(\"justAdded\", true);\n        for (var i = 0; i < numOfMolecules; i++) {\n          // Add a molecule(dependent on it's type) not having a previously defined id and having the complex created in this reaction as parent\n          if (nodeList[i].type == \"Simple Chemical\") {\n            var newNode = elementUtilities.addNode(complex.position(\"x\"), complex.position(\"y\"), {\n              \"class\": \"simple chemical\",\n              language: \"PD\"\n            }, undefined, complex.id());\n          } else {\n            var newNode = elementUtilities.addNode(complex.position(\"x\"), complex.position(\"y\"), {\n              \"class\": \"macromolecule\",\n              language: \"PD\"\n            }, undefined, complex.id());\n          }\n          newNode.data(\"justAdded\", true);\n          newNode.data(\"label\", nodeList[i].name);\n          newNode.data(\"justAddedLayoutNode\", true);\n        }\n      } else {\n        //Create the input macromolecules\n        var numOfInputMacromolecules = complexName.length;\n        yPosition = processPosition.y - (numOfInputMacromolecules - 1) / 2 * (macromoleculeHeight + tilingPaddingVertical);\n        for (var i = 0; i < numOfInputMacromolecules; i++) {\n          if (complexName[i].type == \"Simple Chemical\") {\n            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {\n              \"class\": \"simple chemical\",\n              language: \"PD\"\n            });\n            yPosition += simpleChemicalHeight + tilingPaddingVertical;\n          } else {\n            var newNode = elementUtilities.addNode(xPositionOfInputMacromolecules, yPosition, {\n              \"class\": \"macromolecule\",\n              language: \"PD\"\n            });\n            yPosition += macromoleculeHeight + tilingPaddingVertical;\n          }\n          newNode.data(\"justAdded\", true);\n          newNode.data(\"label\", complexName[i].name);\n\n          //create the edge connected to the new macromolecule\n          var newEdge;\n\n          //Group the left or bottom elements in group id 0 if reversible\n          if (templateType === \"irreversible\") {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: \"PD\"\n            });\n          } else {\n            newEdge = elementUtilities.addEdge(process.id(), newNode.id(), {\n              \"class\": \"production\",\n              language: \"PD\"\n            }, undefined, undefined, 0);\n          }\n          newEdge.data(\"justAdded\", true);\n        }\n      }\n      cy.endBatch();\n      var layoutNodes = cy.nodes(\"[justAddedLayoutNode]\");\n      layoutNodes.removeData(\"justAddedLayoutNode\");\n      var layout = layoutNodes.layout({\n        name: layoutParam.name,\n        randomize: false,\n        fit: false,\n        animate: false,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        stop: function stop() {\n          //If it is a reversible reaction no need to re-position complexes\n          if (templateType === \"reversible\") return;\n          //re-position the nodes inside the complex\n          var supposedXPosition;\n          var supposedYPosition = processPosition.y;\n          if (templateType === \"association\") {\n            supposedXPosition = processPosition.x + edgeLength + processWidth / 2 + complex.outerWidth() / 2;\n          } else {\n            supposedXPosition = processPosition.x - edgeLength - processWidth / 2 - complex.outerWidth() / 2;\n          }\n          var positionDiffX = (supposedXPosition - complex.position(\"x\")) / 2;\n          var positionDiffY = (supposedYPosition - complex.position(\"y\")) / 2;\n          elementUtilities.moveNodes({\n            x: positionDiffX,\n            y: positionDiffY\n          }, complex);\n        }\n      });\n\n      // Do this check for cytoscape.js backward compatibility\n      if (layout && layout.run && templateType !== \"reversible\" && templateType !== \"irreversible\") {\n        layout.run();\n      }\n\n      //filter the just added elememts to return them and remove just added mark\n      var eles = cy.elements(\"[justAdded]\");\n      eles.removeData(\"justAdded\");\n      cy.elements().unselect();\n      eles.select();\n      return eles; // Return the just added elements\n    };\n\n    /*\r\n     * Move the nodes to a new parent and change their position if possDiff params are set.\r\n     */\n    elementUtilities.changeParent = function (nodes, newParent, posDiffX, posDiffY) {\n      var newParentId = newParent == undefined || typeof newParent === \"string\" ? newParent : newParent.id();\n      var movedEles = nodes.move({\n        parent: newParentId\n      });\n      if (typeof posDiffX != \"undefined\" || typeof posDiffY != \"undefined\") {\n        elementUtilities.moveNodes({\n          x: posDiffX,\n          y: posDiffY\n        }, nodes);\n      }\n      elementUtilities.maintainPointer(movedEles);\n      return movedEles;\n    };\n    elementUtilities.updateInfoboxStyle = function (node, index, newProps) {\n      var infoboxObj = node.data(\"statesandinfos\")[index];\n      $.extend(infoboxObj.style, newProps);\n      cy.style().update();\n    };\n    elementUtilities.updateInfoboxObj = function (node, index, newProps) {\n      var infoboxObj = node.data(\"statesandinfos\")[index];\n      $.extend(infoboxObj, newProps);\n    };\n\n    // Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\n    elementUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var ratio = undefined;\n        var eleMustBeSquare = elementUtilities.mustBeSquare(node.data(\"class\"));\n        if (preserveRelativePos === true) {\n          var oldWidth = node.data(\"bbox\").w;\n          var oldHeight = node.data(\"bbox\").h;\n        }\n\n        // Note that both width and height should not be set if useAspectRatio is truthy\n        if (!node.isParent()) {\n          if (width) {\n            if (useAspectRatio || eleMustBeSquare) {\n              ratio = width / node.width();\n            }\n            node.data(\"bbox\").w = width;\n          }\n          if (height) {\n            if (useAspectRatio || eleMustBeSquare) {\n              ratio = height / node.height();\n            }\n            node.data(\"bbox\").h = height;\n          }\n          if (ratio && !height) {\n            node.data(\"bbox\").h = node.height() * ratio;\n          } else if (ratio && !width) {\n            node.data(\"bbox\").w = node.width() * ratio;\n          }\n        } else {\n          node.data(\"minHeight\", \"\" + height);\n          node.data(\"minWidth\", \"\" + width);\n          node.data(\"minWidthBiasLeft\", \"50%\");\n          node.data(\"minWidthBiasRight\", \"50%\");\n          node.data(\"minHeightBiasTop\", \"50%\");\n          node.data(\"minHeightBiasBottom\", \"50%\");\n        }\n\n        /*    if (preserveRelativePos === true) {\r\n          var statesandinfos = node.data('statesandinfos');\r\n          var topBottom = statesandinfos.filter(box => (box.anchorSide === \"top\" || box.anchorSide === \"bottom\"));\r\n          var rightLeft = statesandinfos.filter(box => (box.anchorSide === \"right\" || box.anchorSide === \"left\"));\r\n            topBottom.forEach(function(box){\r\n            if (box.bbox.x < 0) {\r\n              box.bbox.x = 0;\r\n            }\r\n            else if (box.bbox.x > oldWidth) {\r\n              box.bbox.x = oldWidth;\r\n            }\r\n            box.bbox.x = node.data(\"bbox\").w * box.bbox.x / oldWidth;\r\n          });\r\n            rightLeft.forEach(function(box){\r\n            if (box.bbox.y < 0) {\r\n              box.bbox.y = 0;\r\n            }\r\n            else if (box.bbox.y > oldHeight) {\r\n              box.bbox.y = oldHeight;\r\n            }\r\n            box.bbox.y = node.data(\"bbox\").h * box.bbox.y / oldHeight;\r\n          });\r\n        } */\n      }\n    };\n    elementUtilities.calculateMinWidth = function (node) {\n      var defaultWidth = this.getDefaultProperties(node.data(\"class\")).width;\n\n      // Label width calculation\n      var style = node.style();\n      var fontFamiliy = style[\"font-family\"];\n      var fontSize = style[\"font-size\"];\n      var labelText = style[\"label\"];\n      if (labelText === \"\" && node.data(\"label\") && node.data(\"label\") !== \"\") {\n        labelText = node.data(\"label\");\n      }\n      var labelWidth = elementUtilities.getWidthByContent(labelText, fontFamiliy, fontSize);\n      var statesandinfos = node.data(\"statesandinfos\");\n      //Top and bottom infoBoxes\n      //var topInfoBoxes = statesandinfos.filter(box => (box.anchorSide === \"top\" || ((box.anchorSide === \"right\" || box.anchorSide === \"left\") && (box.bbox.y <= 12))));\n      //var bottomInfoBoxes = statesandinfos.filter(box => (box.anchorSide === \"bottom\" || ((box.anchorSide === \"right\" || box.anchorSide === \"left\") && (box.bbox.y >= node.data('bbox').h - 12))));\n      var unitGap = 5;\n      var topIdealWidth = unitGap;\n      var bottomIdealWidth = unitGap;\n      var rightMaxWidth = 0;\n      var leftMaxWidth = 0;\n      statesandinfos.forEach(function (box) {\n        if (box.anchorSide === \"top\") {\n          topIdealWidth += box.bbox.w + unitGap;\n        } else if (box.anchorSide === \"bottom\") {\n          bottomIdealWidth += box.bbox.w + unitGap;\n        } else if (box.anchorSide === \"right\") {\n          rightMaxWidth = box.bbox.w > rightMaxWidth ? box.bbox.w : rightMaxWidth;\n        } else {\n          leftMaxWidth = box.bbox.w > leftMaxWidth ? box.bbox.w : leftMaxWidth;\n        }\n      });\n      var middleWidth = labelWidth + 2 * Math.max(rightMaxWidth / 2, leftMaxWidth / 2);\n      var compoundWidth = 0;\n      if (node.isParent()) {\n        compoundWidth = node.children().boundingBox().w;\n      }\n      return Math.max(middleWidth, defaultWidth / 2, topIdealWidth, bottomIdealWidth, compoundWidth);\n    };\n    elementUtilities.calculateMinHeight = function (node) {\n      var statesandinfos = node.data(\"statesandinfos\");\n      var margin = 7;\n      var unitGap = 5;\n      var defaultHeight = this.getDefaultProperties(node.data(\"class\")).height;\n      var leftInfoBoxes = statesandinfos.filter(function (box) {\n        return box.anchorSide === \"left\";\n      });\n      var leftHeight = unitGap;\n      leftInfoBoxes.forEach(function (box) {\n        leftHeight += box.bbox.h + unitGap;\n      });\n      var rightInfoBoxes = statesandinfos.filter(function (box) {\n        return box.anchorSide === \"right\";\n      });\n      var rightHeight = unitGap;\n      rightInfoBoxes.forEach(function (box) {\n        rightHeight += box.bbox.h + unitGap;\n      });\n      var style = node.style();\n      var labelText = style[\"label\"].split(\"\\n\").filter(function (text) {\n        return text !== \"\";\n      });\n      var fontSize = parseFloat(style[\"font-size\"].substring(0, style[\"font-size\"].length - 2));\n      var totalHeight = labelText.length * fontSize + 2 * margin;\n      var compoundHeight = 0;\n      if (node.isParent()) {\n        compoundHeight = node.children().boundingBox().h;\n      }\n      return Math.max(totalHeight, defaultHeight / 2, leftHeight, rightHeight, compoundHeight);\n    };\n    elementUtilities.isResizedToContent = function (node) {\n      if (!node || !node.isNode() || !node.data(\"bbox\")) {\n        return false;\n      }\n\n      //var w = node.data('bbox').w;\n      //var h = node.data('bbox').h;\n      var w = node.width();\n      var h = node.height();\n      var minW = elementUtilities.calculateMinWidth(node);\n      var minH = elementUtilities.calculateMinHeight(node);\n      if (w === minW && h === minH) return true;else return false;\n    };\n\n    // Section End\n    // Add remove utilities\n\n    // Relocates state and info boxes. This function is expected to be called after add/remove state and info boxes\n    elementUtilities.relocateStateAndInfos = function (ele) {\n      var stateAndInfos = ele.isNode && ele.isNode() ? ele.data(\"statesandinfos\") : ele;\n      var length = stateAndInfos.length;\n      if (length == 0) {\n        return;\n      } else if (length == 1) {\n        stateAndInfos[0].bbox.x = 0;\n        stateAndInfos[0].bbox.y = -50;\n      } else if (length == 2) {\n        stateAndInfos[0].bbox.x = 0;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 0;\n        stateAndInfos[1].bbox.y = 50;\n      } else if (length == 3) {\n        stateAndInfos[0].bbox.x = -25;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 25;\n        stateAndInfos[1].bbox.y = -50;\n        stateAndInfos[2].bbox.x = 0;\n        stateAndInfos[2].bbox.y = 50;\n      } else {\n        stateAndInfos[0].bbox.x = -25;\n        stateAndInfos[0].bbox.y = -50;\n        stateAndInfos[1].bbox.x = 25;\n        stateAndInfos[1].bbox.y = -50;\n        stateAndInfos[2].bbox.x = -25;\n        stateAndInfos[2].bbox.y = 50;\n        stateAndInfos[3].bbox.x = 25;\n        stateAndInfos[3].bbox.y = 50;\n      }\n    };\n\n    // Change state value or unit of information box of given nodes with given index.\n    // Type parameter indicates whether to change value or variable, it is valid if the box at the given index is a state variable.\n    // Value parameter is the new value to set.\n    // This method returns the old value of the changed data (We assume that the old value of the changed data was the same for all nodes).\n    // Each character assumed to occupy 8 unit\n    // Each infobox can have at most 32 units of width\n    elementUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {\n      var result;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var stateAndInfos = node.data(\"statesandinfos\");\n        var box = stateAndInfos[index];\n        var oldLength = box.bbox.w;\n        var newLength = 0;\n        var content = \"\";\n        if (box.clazz == \"state variable\") {\n          if (!result) {\n            result = box.state[type];\n          }\n          box.state[type] = value;\n          if (box.state[\"value\"] !== undefined) {\n            content += box.state[\"value\"];\n          }\n          if (box.state[\"variable\"] !== undefined && box.state[\"variable\"].length > 0) {\n            content += box.state[\"variable\"] + \"@\";\n          }\n        } else if (box.clazz == \"unit of information\") {\n          if (!result) {\n            result = box.label.text;\n          }\n          content += value;\n          box.label.text = value;\n        } else if (box.clazz == \"residue variable\") {\n          if (!result) {\n            result = box.residue[type];\n          }\n          box.residue[type] = value;\n          if (box.residue[\"variable\"] !== undefined && box.residue[\"variable\"].length > 0) {\n            content += box.residue[\"variable\"];\n          }\n        } else if (box.clazz == \"binding region\") {\n          if (!result) {\n            result = box.region[type];\n          }\n          box.region[type] = value;\n          if (box.region[\"variable\"] !== undefined && box.region[\"variable\"].length > 0) {\n            content += box.region[\"variable\"];\n          }\n        }\n        var min = sbgnclass === \"SIF macromolecule\" || sbgnclass === \"SIF simple chemical\" ? 15 : 12;\n        var fontFamily = box.style[\"font-family\"];\n        var fontSize = box.style[\"font-size\"];\n        var borderWidth = box.style[\"border-width\"];\n        var opts = {\n          min: min,\n          max: 48,\n          margin: borderWidth / 2 + 0.5\n        };\n        var previousWidth = box.bbox.w;\n        box.bbox.w = elementUtilities.getWidthByContent(content, fontFamily, fontSize, opts);\n        if (box.anchorSide == \"top\" || box.anchorSide == \"bottom\") {\n          var unitLayout = node.data()[\"auxunitlayouts\"][box.anchorSide];\n          if (unitLayout.units[unitLayout.units.length - 1].id == box.id) {\n            var borderWidth = node.data()[\"border-width\"];\n            var shiftAmount = (box.bbox.w - previousWidth) / 2 * 100 / (node.outerWidth() - borderWidth);\n            if (shiftAmount >= 0) {\n              if (box.bbox.x + shiftAmount <= 100) {\n                box.bbox.x = box.bbox.x + shiftAmount;\n              }\n            }\n            /*  else{\r\n              var previousInfoBbox = {x : 0, w:0};\r\n              if(unitLayout.units.length > 1){\r\n                previousInfoBbox= unitLayout.units[unitLayout.units.length-2].bbox;      \r\n              }\r\n                \r\n              \r\n              sbgnvizInstance.classes.AuxUnitLayout.setIdealGap(node, box.anchorSide);\r\n              var idealGap = sbgnvizInstance.classes.AuxUnitLayout.getCurrentGap(box.anchorSide);\r\n              var newPosition = previousInfoBbox.x + (previousInfoBbox.w/2 + idealGap + box.bbox.w/2)*100 / (node.outerWidth() - borderWidth);\r\n              box.bbox.x = newPosition;\r\n              \r\n            } */\n          }\n        }\n\n        /* if (box.anchorSide === \"top\" || box.anchorSide === \"bottom\") {\r\n          box.bbox.x += (box.bbox.w - oldLength) / 2;\r\n          var units = (node.data('auxunitlayouts')[box.anchorSide]).units;\r\n          var shiftIndex = 0;\r\n          for (var i = 0; i < units.length; i++) {\r\n            if(units[i] === box){\r\n              shiftIndex = i;\r\n              break;\r\n            }\r\n          }\r\n          for (var j = shiftIndex+1; j < units.length; j++) {\r\n              units[j].bbox.x += (box.bbox.w - oldLength);\r\n          }\r\n        } */\n      }\n\n      //TODO find a way to elimate this redundancy to update info-box positions\n      node.data(\"border-width\", node.data(\"border-width\"));\n      return result;\n    };\n\n    // Add a new state or info box to given nodes.\n    // The box is represented by the parameter obj.\n    // This method returns the index of the just added box.\n    elementUtilities.addStateOrInfoBox = function (nodes, obj) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var locationObj;\n        var defaultProps = elementUtilities.getDefaultProperties(node.data(\"class\"));\n        var infoboxProps = defaultProps[obj.clazz];\n        var bbox = obj.bbox || {\n          w: infoboxProps.width,\n          h: infoboxProps.height\n        };\n        var style = elementUtilities.getDefaultInfoboxStyle(node.data(\"class\"), obj.clazz);\n        if (obj.style) {\n          $.extend(style, obj.style);\n        }\n        if (obj.clazz == \"unit of information\") {\n          locationObj = sbgnvizInstance.classes.UnitOfInformation.create(node, cy, obj.label.text, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"state variable\") {\n          locationObj = sbgnvizInstance.classes.StateVariable.create(node, cy, obj.state.value, obj.state.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"residue variable\") {\n          locationObj = sbgnvizInstance.classes.ResidueVariable.create(node, cy, obj.residue.value, obj.residue.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        } else if (obj.clazz == \"binding region\") {\n          locationObj = sbgnvizInstance.classes.BindingRegion.create(node, cy, obj.region.value, obj.region.variable, bbox, obj.location, obj.position, style, obj.index, obj.id);\n        }\n      }\n      return locationObj;\n    };\n\n    // Remove the state or info boxes of the given nodes at given index.\n    // Returns the removed box.\n    elementUtilities.removeStateOrInfoBox = function (nodes, locationObj) {\n      var obj;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var stateAndInfos = node.data(\"statesandinfos\");\n        var unit = stateAndInfos[locationObj.index];\n        var unitClass = sbgnvizInstance.classes.getAuxUnitClass(unit);\n        obj = unitClass.remove(unit, cy);\n      }\n      return obj;\n    };\n\n    //Tiles informations boxes for given anchorSides\n    elementUtilities.fitUnits = function (node, locations) {\n      var obj = [];\n      node.data(\"statesandinfos\").forEach(function (ele) {\n        obj.push({\n          x: ele.bbox.x,\n          y: ele.bbox.y,\n          anchorSide: ele.anchorSide\n        });\n      });\n      sbgnvizInstance.classes.AuxUnitLayout.fitUnits(node, cy, locations);\n      return obj;\n    };\n\n    //Check which anchorsides fits\n    elementUtilities.checkFit = function (node, location) {\n      //if no location given, it checks all possible locations\n      return sbgnvizInstance.classes.AuxUnitLayout.checkFit(node, cy, location);\n    };\n\n    //Modify array of aux layout units\n    elementUtilities.modifyUnits = function (node, unit, anchorSide) {\n      sbgnvizInstance.classes.AuxUnitLayout.modifyUnits(node, unit, anchorSide, cy);\n    };\n\n    // Set multimer status of the given nodes to the given status.\n    elementUtilities.setMultimerStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var isMultimer = node.data(\"class\").endsWith(\" multimer\");\n        if (status) {\n          // Make multimer status true\n          if (!isMultimer) {\n            node.data(\"class\", sbgnclass + \" multimer\");\n          }\n        } else {\n          // Make multimer status false\n          if (isMultimer) {\n            node.data(\"class\", sbgnclass.replace(\" multimer\", \"\"));\n          }\n        }\n      }\n    };\n\n    //Need to add this to doc : TO-DO\n    elementUtilities.setActiveStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var isActive = node.data(\"class\").startsWith(\"active \");\n        if (status) {\n          // Make multimer status true\n          if (!isActive) {\n            node.data(\"class\", \"active \" + sbgnclass);\n            //node.data('class', sbgnclass + ' multimer');\n          }\n        } else {\n          // Make multimer status false\n          if (isActive) {\n            node.data(\"class\", sbgnclass.replace(\"active \", \"\"));\n            //node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    };\n\n    //Need to add this to doc : TO-DO\n    elementUtilities.setHypotheticalStatus = function (nodes, status) {\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var sbgnclass = node.data(\"class\");\n        var isHypothetical = node.data(\"class\").includes(\"hypothetical\");\n        var isActive = node.data(\"class\").startsWith(\"active \");\n        if (status) {\n          // Make multimer status true\n          if (!isHypothetical) {\n            if (isActive) {\n              var tmp = sbgnclass.substring(7);\n              node.data(\"class\", \"active hypothetical \" + tmp);\n            } else {\n              node.data(\"class\", \"hypothetical \" + sbgnclass);\n            }\n            //node.data('class', sbgnclass + ' multimer');\n          }\n        } else {\n          // Make multimer status false\n          if (isHypothetical) {\n            node.data(\"class\", sbgnclass.replace(\"hypothetical \", \"\"));\n            //node.data('class', sbgnclass.replace(' multimer', ''));\n          }\n        }\n      }\n    };\n\n    // Change font properties of the given elements with given font data\n    elementUtilities.changeFontProperties = function (eles, data) {\n      for (var prop in data) {\n        eles.data(prop, data[prop]);\n      }\n    };\n\n    // This function gets an edge, and ends of that edge (Optionally it may take just the classes of the edge as well) as parameters.\n    // It may return 'valid' (that ends is valid for that edge), 'reverse' (that ends is not valid for that edge but they would be valid\n    // if you reverse the source and target), 'invalid' (that ends are totally invalid for that edge).\n    elementUtilities.validateArrowEnds = function (edge, source, target, isReplacement) {\n      // if map type is Unknown -- no rules applied\n      if (elementUtilities.getMapType() == \"HybridAny\" || elementUtilities.getMapType() == \"HybridSbgn\" || !elementUtilities.getMapType()) return \"valid\";\n      var edgeclass = typeof edge === \"string\" ? edge : edge.data(\"class\");\n      var sourceclass = source.data(\"class\");\n      var targetclass = target.data(\"class\");\n      var mapType = elementUtilities.getMapType();\n      var edgeConstraints = elementUtilities[mapType].connectivityConstraints[edgeclass];\n      if (mapType == \"AF\") {\n        if (sourceclass.startsWith(\"BA\"))\n          // we have separate classes for each biological activity\n          sourceclass = \"biological activity\"; // but same rule applies to all of them\n\n        if (targetclass.startsWith(\"BA\"))\n          // we have separate classes for each biological activity\n          targetclass = \"biological activity\"; // but same rule applies to all of them\n      } else if (mapType == \"PD\") {\n        sourceclass = sourceclass.replace(/\\s*multimer$/, \"\");\n        targetclass = targetclass.replace(/\\s*multimer$/, \"\");\n      } else if (mapType == \"SBML\") {\n        sourceclass = sourceclass.replace(/\\s*multimer$/, \"\");\n        targetclass = targetclass.replace(/\\s*multimer$/, \"\");\n        sourceclass = sourceclass.replace(\"active \", \"\");\n        targetclass = targetclass.replace(\"active \", \"\");\n        sourceclass = sourceclass.replace(\"hypothetical \", \"\");\n        targetclass = targetclass.replace(\"hypothetical \", \"\");\n      }\n\n      // given a node, acting as source or target, returns boolean wether or not it has too many edges already\n      function hasTooManyEdges(node, sourceOrTarget) {\n        var nodeclass = node.data(\"class\");\n        nodeclass = nodeclass.replace(/\\s*multimer$/, \"\");\n        nodeclass = nodeclass.replace(\"active \", \"\");\n        nodeclass = nodeclass.replace(\"hypothetical \", \"\");\n        if (nodeclass.startsWith(\"BA\")) nodeclass = \"biological activity\";\n\n        /*\r\n          On the logic below:\r\n            Current edge count (incoming or outgoing) of nodes should be strictly less \r\n          than the maximum allowed if we are adding an edge to the node. This way\r\n          it will never exceed the max count.\r\n          \r\n          Edges can be added in two different ways. Either they are added directly or\r\n          they are added by being replaced from another node, i.e disconnected from\r\n          one and connected to another.\r\n            We can detect if the edge being added is added from a replacement by checking\r\n          whether the source stayed the same when checking edge counts of the source node,\r\n          and whether the target stayed the same when checking edge counts of the\r\n          target node.\r\n            Current edge count of nodes can be allowed to be equal to the maximum in \r\n          cases where a replacement is made. But we should be careful that this\r\n          replacement operation is not also an addition operation as described above.\r\n        */\n\n        var totalTooMany = true;\n        var edgeTooMany = true;\n        if (sourceOrTarget == \"source\") {\n          var sameEdgeCountOut = node.outgoers('edge[class=\"' + edgeclass + '\"]').size();\n          var totalEdgeCountOut = node.outgoers(\"edge\").size();\n          var maxTotal = edgeConstraints[nodeclass].asSource.maxTotal;\n          var maxEdge = edgeConstraints[nodeclass].asSource.maxEdge;\n          var compareStrict = !(isReplacement && edge.source() === source);\n          var withinLimits = !maxTotal || compareStrict && totalEdgeCountOut < maxTotal || !compareStrict && totalEdgeCountOut <= maxTotal;\n          if (withinLimits) {\n            totalTooMany = false;\n          }\n          // then check limits for this specific edge class\n\n          withinLimits = !maxEdge || compareStrict && sameEdgeCountOut < maxEdge || !compareStrict && sameEdgeCountOut <= maxEdge;\n          if (withinLimits) {\n            edgeTooMany = false;\n          }\n\n          // if only one of the limits is reached then edge is invalid\n          return totalTooMany || edgeTooMany;\n        } else {\n          // node is used as target\n          var sameEdgeCountIn = node.incomers('edge[class=\"' + edgeclass + '\"]').size();\n          var totalEdgeCountIn = node.incomers(\"edge\").size();\n          var maxTotal = edgeConstraints[nodeclass].asTarget.maxTotal;\n          var maxEdge = edgeConstraints[nodeclass].asTarget.maxEdge;\n          var compareStrict = !(isReplacement && edge.target() === target);\n          var withinLimits = !maxTotal || compareStrict && totalEdgeCountIn < maxTotal || !compareStrict && totalEdgeCountIn <= maxTotal;\n          if (withinLimits) {\n            totalTooMany = false;\n          }\n          withinLimits = !maxEdge || compareStrict && sameEdgeCountIn < maxEdge || !compareStrict && sameEdgeCountIn <= maxEdge;\n          if (withinLimits) {\n            edgeTooMany = false;\n          }\n          return totalTooMany || edgeTooMany;\n        }\n      }\n      function isInComplex(node) {\n        var parentClass = node.parent().data(\"class\");\n        return parentClass && parentClass.startsWith(\"complex\");\n      }\n      if (isInComplex(source) || isInComplex(target)) {\n        // subunits of a complex are no longer EPNs, no connection allowed\n        return \"invalid\";\n      }\n\n      // check nature of connection\n      if (edgeConstraints[sourceclass].asSource.isAllowed && edgeConstraints[targetclass].asTarget.isAllowed) {\n        // check amount of connections\n        if (!hasTooManyEdges(source, \"source\") && !hasTooManyEdges(target, \"target\")) {\n          return \"valid\";\n        }\n      }\n      // try to reverse\n      if (edgeConstraints[targetclass].asSource.isAllowed && edgeConstraints[sourceclass].asTarget.isAllowed) {\n        if (!hasTooManyEdges(target, \"source\") && !hasTooManyEdges(source, \"target\")) {\n          return \"reverse\";\n        }\n      }\n      return \"invalid\";\n    };\n    elementUtilities.deleteAndPerformLayout = function (eles, layoutparam) {\n      var result = eles.remove();\n      if (typeof layoutparam === \"function\") {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n\n        // Do this check for cytoscape.js backward compatibility\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n      return result;\n    };\n\n    /*\r\n     * Hide given eles and perform given layout afterward. Layout parameter may be layout options\r\n     * or a function to call.\r\n     */\n    elementUtilities.hideAndPerformLayout = function (eles, layoutparam) {\n      var result = cy.viewUtilities().hide(eles); // Hide given eles\n      if (typeof layoutparam === \"function\") {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n\n        // Do this check for cytoscape.js backward compatibility\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n      return result;\n    };\n\n    /*\r\n     * Unhide given eles and perform given layout afterward. Layout parameter may be layout options\r\n     * or a function to call.\r\n     */\n    elementUtilities.showAndPerformLayout = function (eles, layoutparam) {\n      var result = cy.viewUtilities().show(eles); // Show given eles\n      if (typeof layoutparam === \"function\") {\n        layoutparam(); // If layoutparam is a function execute it\n      } else {\n        var layout = cy.layout(layoutparam); // If layoutparam is layout options call layout with that options.\n\n        // Do this check for cytoscape.js backward compatibility\n        if (layout && layout.run) {\n          layout.run();\n        }\n      }\n      return result;\n    };\n\n    /*\r\n     * Change style/css of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be\r\n     * a single string or an id to value map).\r\n     */\n    elementUtilities.changeCss = function (eles, name, valueMap) {\n      if (_typeof(valueMap) === \"object\") {\n        cy.startBatch();\n        for (var i = 0; i < eles.length; i++) {\n          var ele = cy.getElementById(eles[i].id());\n          ele.css(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way\n        }\n        cy.endBatch();\n      } else {\n        eles.css(name, valueMap); // valueMap is just a string set css('name') for all eles to this value\n      }\n    };\n\n    /*\r\n     * Change data of given eles by setting getting property name to the given value/values (Note that valueMap parameter may be\r\n     * a single string or an id to value map).\r\n     */\n    elementUtilities.changeData = function (eles, name, valueMap) {\n      if (_typeof(valueMap) === \"object\") {\n        cy.startBatch();\n        for (var i = 0; i < eles.length; i++) {\n          var ele = cy.getElementById(eles[i].id());\n          ele.data(name, valueMap[ele.id()]); // valueMap is an id to value map use it in this way\n        }\n        cy.endBatch();\n      } else {\n        eles.data(name, valueMap); // valueMap is just a string set css('name') for all eles to this value\n      }\n    };\n    elementUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {\n      var set = ele.data(fieldName);\n      if (!set) {\n        return;\n      }\n      var updates = {};\n      if (toDelete != null && set[toDelete]) {\n        delete set[toDelete];\n        updates.deleted = toDelete;\n      }\n      if (toAdd != null) {\n        set[toAdd] = true;\n        updates.added = toAdd;\n      }\n      if (callback && (updates[\"deleted\"] != null || updates[\"added\"] != null)) {\n        callback();\n      }\n      return updates;\n    };\n\n    /*\r\n     * Return the set of all nodes present under the given position\r\n     * renderedPos must be a point defined relatively to cytoscape container\r\n     * (like renderedPosition field of a node)\r\n     */\n    elementUtilities.getNodesAt = function (renderedPos) {\n      var nodes = cy.nodes();\n      var x = renderedPos.x;\n      var y = renderedPos.y;\n      var resultNodes = [];\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var renderedBbox = node.renderedBoundingBox({\n          includeNodes: true,\n          includeEdges: false,\n          includeLabels: false,\n          includeShadows: false\n        });\n        if (x >= renderedBbox.x1 && x <= renderedBbox.x2) {\n          if (y >= renderedBbox.y1 && y <= renderedBbox.y2) {\n            resultNodes.push(node);\n          }\n        }\n      }\n      return resultNodes;\n    };\n    elementUtilities.demultimerizeClass = function (sbgnclass) {\n      return sbgnclass.replace(\" multimer\", \"\");\n    };\n\n    /**\r\n     * @param mapType - type of the current map (PD, AF or Unknown)\r\n     */\n    elementUtilities.setMapType = function (mapType) {\n      elementUtilities.mapType = mapType;\n      return mapType;\n    };\n\n    /**\r\n     * return - map type\r\n     */\n    elementUtilities.getMapType = function () {\n      return elementUtilities.mapType;\n    };\n    /**\r\n     * Resets map type\r\n     */\n    elementUtilities.resetMapType = function () {\n      elementUtilities.mapType = undefined;\n    };\n\n    /**\r\n     * Keep consistency of links to self inside the data() structure.\r\n     * This is needed whenever a node changes parents, for example,\r\n     * as it is destroyed and recreated. But the data() stays identical.\r\n     * This creates inconsistencies for the pointers stored in data(),\r\n     * as they now point to a deleted node.\r\n     */\n    elementUtilities.maintainPointer = function (eles) {\n      eles.nodes().forEach(function (ele) {\n        // restore background images\n        ele.emit(\"data\");\n\n        // skip nodes without any auxiliary units\n        if (!ele.data(\"statesandinfos\") || ele.data(\"statesandinfos\").length == 0) {\n          return;\n        }\n        for (var side in ele.data(\"auxunitlayouts\")) {\n          ele.data(\"auxunitlayouts\")[side].parentNode = ele.id();\n        }\n        for (var i = 0; i < ele.data(\"statesandinfos\").length; i++) {\n          ele.data(\"statesandinfos\")[i].parent = ele.id();\n        }\n      });\n    };\n    elementUtilities.anyHasBackgroundImage = function (eles) {\n      var obj = elementUtilities.getBackgroundImageObjs(eles);\n      if (obj === undefined) return false;else {\n        for (var key in obj) {\n          var value = obj[key];\n          if (value && !$.isEmptyObject(value)) return true;\n        }\n        return false;\n      }\n    };\n    elementUtilities.hasBackgroundImage = function (ele) {\n      if (!ele.isNode() || !ele.data(\"background-image\")) {\n        return false;\n      }\n      var bg;\n      if (typeof ele.data(\"background-image\") === \"string\") {\n        bg = ele.data(\"background-image\").split(\" \");\n      } else if (Array.isArray(obj[\"background-image\"])) {\n        bg = ele.data(\"background-image\");\n      }\n      if (!bg) return false;\n      var cloneImg = \"data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E\";\n      // If cloneImg is not the only image or there are multiple images there is a background image\n      var onlyHasCloneMarkerAsBgImage = bg.length === 1 && bg.indexOf(cloneImg) === 0;\n      if (bg.length > 1 || !onlyHasCloneMarkerAsBgImage) return true;\n      return false;\n    };\n    elementUtilities.getBackgroundImageURL = function (eles) {\n      \"getting background images\";\n      if (!eles || eles.length < 1) return;\n      var commonURL = \"\";\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        if (!ele.isNode() || !elementUtilities.hasBackgroundImage(ele)) return;\n        var url = ele.data(\"background-image\").split(\" \").pop();\n        if (!url || url.indexOf(\"http\") !== 0 || commonURL !== \"\" && commonURL !== url) return;else if (commonURL === \"\") commonURL = url;\n      }\n      return commonURL;\n    };\n    elementUtilities.getBackgroundImageObjs = function (eles) {\n      if (!eles || eles.length < 1) return;\n      var list = {};\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        var obj = getBgObj(ele);\n        if (Object.keys(obj).length < 1) return;\n        list[ele.data(\"id\")] = obj;\n      }\n      return list;\n      function getBgObj(ele) {\n        if (ele.isNode() && elementUtilities.hasBackgroundImage(ele)) {\n          var keys = [\"background-image\", \"background-fit\", \"background-image-opacity\", \"background-position-x\", \"background-position-y\", \"background-height\", \"background-width\"];\n          var obj = {};\n          keys.forEach(function (key) {\n            var value;\n            if (ele.data(key) && typeof ele.data(key) === \"string\") {\n              value = ele.data(key).split(\" \")[0];\n            } else {\n              value = ele.data(key);\n            }\n            obj[key] = value;\n          });\n          return obj;\n        } else if (ele.isNode()) return {};\n      }\n    };\n    elementUtilities.getBackgroundFitOptions = function (eles) {\n      if (!eles || eles.length < 1) return;\n      var commonFit = \"\";\n      for (var i = 0; i < eles.length; i++) {\n        var node = eles[i];\n        if (!node.isNode()) return;\n        var fit = getFitOption(node);\n        if (!fit || commonFit !== \"\" && fit !== commonFit) return;else if (commonFit === \"\") commonFit = fit;\n      }\n      var options = '<option value=\"none\">None</option>' + '<option value=\"fit\">Fit</option>' + '<option value=\"cover\">Cover</option>' + '<option value=\"contain\">Contain</option>';\n      var searchKey = 'value=\"' + commonFit + '\"';\n      var index = options.indexOf(searchKey) + searchKey.length;\n      return options.substr(0, index) + \" selected\" + options.substr(index);\n      function getFitOption(node) {\n        if (!elementUtilities.hasBackgroundImage(node)) return;\n        var f = node.data(\"background-fit\");\n        var h = node.data(\"background-height\");\n        if (!f || !h) return;\n        f = f.split(\" \");\n        h = h.split(\" \");\n        if (f[f.length - 1] === \"none\") return h[h.length - 1] === \"auto\" ? \"none\" : \"fit\";else return f[f.length - 1];\n      }\n    };\n    elementUtilities.updateBackgroundImage = function (nodes, bgObj) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data(\"id\")];\n        if (!obj || $.isEmptyObject(obj)) continue;\n        var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n        var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n        var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n        var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n        var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n        var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n        var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n        var index = -1;\n        if (typeof obj[\"background-image\"] === \"string\") index = imgs.indexOf(obj[\"background-image\"]);else if (Array.isArray(obj[\"background-image\"])) index = imgs.indexOf(obj[\"background-image\"][0]);\n        if (index < 0) continue;\n        if (obj[\"background-image\"] && imgs.length > index) {\n          var tmp = imgs[index];\n          imgs[index] = obj[\"background-image\"];\n          obj[\"background-image\"] = tmp;\n        }\n        if (obj[\"background-fit\"] && fits.length > index) {\n          var tmp = fits[index];\n          fits[index] = obj[\"background-fit\"];\n          obj[\"background-fit\"] = tmp;\n        }\n        if (obj[\"background-width\"] && widths.length > index) {\n          var tmp = widths[index];\n          widths[index] = obj[\"background-width\"];\n          obj[\"background-width\"] = tmp;\n        }\n        if (obj[\"background-height\"] && heights.length > index) {\n          var tmp = heights[index];\n          heights[index] = obj[\"background-height\"];\n          obj[\"background-height\"] = tmp;\n        }\n        if (obj[\"background-position-x\"] && xPos.length > index) {\n          var tmp = xPos[index];\n          xPos[index] = obj[\"background-position-x\"];\n          obj[\"background-position-x\"] = tmp;\n        }\n        if (obj[\"background-position-y\"] && yPos.length > index) {\n          var tmp = yPos[index];\n          yPos[index] = obj[\"background-position-y\"];\n          obj[\"background-position-y\"] = tmp;\n        }\n        if (obj[\"background-image-opacity\"] && opacities.length > index) {\n          var tmp = opacities[index];\n          opacities[index] = obj[\"background-image-opacity\"];\n          obj[\"background-image-opacity\"] = tmp;\n        }\n        node.data(\"background-image\", imgs.join(\" \"));\n        node.data(\"background-position-x\", xPos.join(\" \"));\n        node.data(\"background-position-y\", yPos.join(\" \"));\n        node.data(\"background-width\", widths.join(\" \"));\n        node.data(\"background-height\", heights.join(\" \"));\n        node.data(\"background-fit\", fits.join(\" \"));\n        node.data(\"background-image-opacity\", opacities.join(\" \"));\n      }\n      return bgObj;\n    };\n    elementUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL) {\n      if (!nodes || nodes.length == 0 || !oldImg || !newImg) return;\n      elementUtilities.removeBackgroundImage(nodes, oldImg);\n      for (var key in newImg) {\n        newImg[key][\"firstTime\"] = firstTime;\n      }\n      elementUtilities.addBackgroundImage(nodes, newImg, updateInfo, promptInvalidImage, validateURL);\n      return {\n        nodes: nodes,\n        oldImg: newImg,\n        newImg: oldImg,\n        firstTime: false,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n    };\n\n    // Add a background image to given nodes.\n    elementUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data(\"id\")];\n        if (!obj || $.isEmptyObject(obj)) continue;\n\n        // Load the image from local, else just put the URL\n        if (obj[\"fromFile\"]) loadBackgroundThenApply(node, obj);\n        // Validity of given URL should be checked before applying it\n        else if (obj[\"firstTime\"]) {\n          if (typeof validateURL === \"function\") validateURL(node, obj, applyBackground, promptInvalidImage);else checkGivenURL(node, obj);\n        } else applyBackground(node, obj);\n      }\n      function loadBackgroundThenApply(node, bgObj) {\n        var reader = new FileReader();\n        var imgFile = bgObj[\"background-image\"];\n\n        // Check whether given file is an image file\n        if (imgFile.type.indexOf(\"image\") !== 0) {\n          if (promptInvalidImage) promptInvalidImage(\"Invalid image file is given!\");\n          return;\n        }\n        reader.readAsDataURL(imgFile);\n        reader.onload = function (e) {\n          var img = reader.result;\n          if (img) {\n            bgObj[\"background-image\"] = img;\n            bgObj[\"fromFile\"] = false;\n            applyBackground(node, bgObj);\n          } else {\n            if (promptInvalidImage) promptInvalidImage(\"Given file could not be read!\");\n          }\n        };\n      }\n      function checkGivenURL(node, bgObj) {\n        var url = bgObj[\"background-image\"];\n        var extension = url.split(/[?#]/)[0].split(\".\").pop();\n        var validExtensions = [\"png\", \"svg\", \"jpg\", \"jpeg\"];\n        if (!validExtensions.includes(extension)) {\n          if (typeof promptInvalidImage === \"function\") promptInvalidImage(\"Invalid URL is given!\");\n          return;\n        }\n        $.ajax({\n          url: url,\n          type: \"GET\",\n          success: function success(result, status, xhr) {\n            applyBackground(node, bgObj);\n          },\n          error: function error(xhr, status, _error) {\n            if (promptInvalidImage) promptInvalidImage(\"Invalid URL is given!\");\n          }\n        });\n      }\n      function applyBackground(node, bgObj) {\n        if (elementUtilities.hasBackgroundImage(node)) return;\n        var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n        var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n        var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n        var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n        var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n        var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n        var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n        var indexToInsert = imgs.length;\n\n        // insert to length-1\n        if (elementUtilities.hasCloneMarker(imgs)) {\n          indexToInsert--;\n        }\n        imgs.splice(indexToInsert, 0, bgObj[\"background-image\"]);\n        fits.splice(indexToInsert, 0, bgObj[\"background-fit\"]);\n        opacities.splice(indexToInsert, 0, bgObj[\"background-image-opacity\"]);\n        xPos.splice(indexToInsert, 0, bgObj[\"background-position-x\"]);\n        yPos.splice(indexToInsert, 0, bgObj[\"background-position-y\"]);\n        widths.splice(indexToInsert, 0, bgObj[\"background-width\"]);\n        heights.splice(indexToInsert, 0, bgObj[\"background-height\"]);\n        node.data(\"background-image\", imgs.join(\" \"));\n        node.data(\"background-position-x\", xPos.join(\" \"));\n        node.data(\"background-position-y\", yPos.join(\" \"));\n        node.data(\"background-width\", widths.join(\" \"));\n        node.data(\"background-height\", heights.join(\" \"));\n        node.data(\"background-fit\", fits.join(\" \"));\n        node.data(\"background-image-opacity\", opacities.join(\" \"));\n        bgObj[\"firstTime\"] = false;\n        if (updateInfo) updateInfo();\n      }\n    };\n    elementUtilities.hasCloneMarker = function (imgs) {\n      var cloneImg = \"data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E\";\n      return imgs.indexOf(cloneImg) > -1;\n    };\n\n    // Remove a background image from given nodes.\n    elementUtilities.removeBackgroundImage = function (nodes, bgObj) {\n      if (!nodes || nodes.length == 0 || !bgObj) return;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var obj = bgObj[node.data(\"id\")];\n        if (!obj) continue;\n        var imgs = node.data(\"background-image\") ? node.data(\"background-image\").split(\" \") : [];\n        var xPos = node.data(\"background-position-x\") ? node.data(\"background-position-x\").split(\" \") : [];\n        var yPos = node.data(\"background-position-y\") ? node.data(\"background-position-y\").split(\" \") : [];\n        var widths = node.data(\"background-width\") ? node.data(\"background-width\").split(\" \") : [];\n        var heights = node.data(\"background-height\") ? node.data(\"background-height\").split(\" \") : [];\n        var fits = node.data(\"background-fit\") ? node.data(\"background-fit\").split(\" \") : [];\n        var opacities = node.data(\"background-image-opacity\") ? (\"\" + node.data(\"background-image-opacity\")).split(\" \") : [];\n        var index = -1;\n        if (typeof obj[\"background-image\"] === \"string\") index = imgs.indexOf(obj[\"background-image\"].split(\" \")[0]);else if (Array.isArray(obj[\"background-image\"])) index = imgs.indexOf(obj[\"background-image\"][0]);\n        if (index > -1) {\n          imgs.splice(index, 1);\n          fits.splice(index, 1);\n          opacities.splice(index, 1);\n          xPos.splice(index, 1);\n          yPos.splice(index, 1);\n          widths.splice(index, 1);\n          heights.splice(index, 1);\n        }\n        node.data(\"background-image\", imgs.join(\" \"));\n        node.data(\"background-position-x\", xPos.join(\" \"));\n        node.data(\"background-position-y\", yPos.join(\" \"));\n        node.data(\"background-width\", widths.join(\" \"));\n        node.data(\"background-height\", heights.join(\" \"));\n        node.data(\"background-fit\", fits.join(\" \"));\n        node.data(\"background-image-opacity\", opacities.join(\" \"));\n        bgObj[\"firstTime\"] = false;\n      }\n    };\n    elementUtilities.reverseEdge = function (edge) {\n      var oldSource = edge.source().id();\n      var oldTarget = edge.target().id();\n      var oldPortSource = edge.data(\"portsource\");\n      var oldPortTarget = edge.data(\"porttarget\");\n      var segmentPoints = edge.segmentPoints();\n      var controlPoints = edge.controlPoints();\n      edge.data().source = oldTarget;\n      edge.data().target = oldSource;\n      edge.data().portsource = oldPortTarget;\n      edge.data().porttarget = oldPortSource;\n      edge = edge.move({\n        target: oldSource,\n        source: oldTarget\n      });\n      if (Array.isArray(segmentPoints)) {\n        segmentPoints.reverse();\n        edge.data().bendPointPositions = segmentPoints;\n        if (Array.isArray(controlPoints)) {\n          controlPoints.reverse();\n          edge.data().controlPointPositions = controlPoints;\n        }\n        var edgeEditing = cy.edgeEditing(\"get\");\n        edgeEditing.initAnchorPoints(edge);\n      }\n      return edge;\n    };\n  }\n  return elementUtilitiesExtender;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-extender-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \r\n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\r\n */\n\nvar libUtilities = function libUtilities() {};\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2xpYi11dGlsaXRpZXMuanMiLCJuYW1lcyI6WyJsaWJVdGlsaXRpZXMiLCJzZXRMaWJzIiwibGlicyIsImdldExpYnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvbGliLXV0aWxpdGllcy5qcz9iYWFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIFxyXG4gKiBVdGlsaXR5IGZpbGUgdG8gZ2V0IGFuZCBzZXQgdGhlIGxpYnJhcmllcyB0byB3aGljaCBzYmdudml6IGlzIGRlcGVuZGVudCBmcm9tIGFueSBmaWxlLlxyXG4gKi9cclxuXHJcbnZhciBsaWJVdGlsaXRpZXMgPSBmdW5jdGlvbigpe1xyXG59O1xyXG5cclxubGliVXRpbGl0aWVzLnNldExpYnMgPSBmdW5jdGlvbihsaWJzKSB7XHJcbiAgdGhpcy5saWJzID0gbGlicztcclxufTtcclxuXHJcbmxpYlV0aWxpdGllcy5nZXRMaWJzID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHRoaXMubGlicztcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbGliVXRpbGl0aWVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLElBQUlBLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFBLEVBQWEsQ0FDN0IsQ0FBQztBQUVEQSxZQUFZLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxJQUFJLEVBQUU7RUFDcEMsSUFBSSxDQUFDQSxJQUFJLEdBQUdBLElBQUk7QUFDbEIsQ0FBQztBQUVERixZQUFZLENBQUNHLE9BQU8sR0FBRyxZQUFXO0VBQ2hDLE9BQU8sSUFBSSxDQUFDRCxJQUFJO0FBQ2xCLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUdMLFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\n\n/*\r\n * The main utilities to be exposed directly.\r\n */\nmodule.exports = function () {\n  var elementUtilities, options, cy, sbgnvizInstance;\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n  }\n  ;\n\n  /*\r\n   * Adds a new node with the given class and at the given coordinates. Considers undoable option.\r\n   */\n  mainUtilities.addNode = function (x, y, nodeParams, id, parent, visibility) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // update map type\n    if (_typeof(nodeParams) == 'object') {\n      /* \r\n            if (!elementUtilities.getMapType())\r\n              elementUtilities.setMapType(nodeParams.language);\r\n            else if (elementUtilities.getMapType() != nodeParams.language)\r\n              elementUtilities.setMapType(\"Unknown\"); */\n    }\n    if (!options.undoable) {\n      return elementUtilities.addNode(x, y, nodeParams, id, parent, visibility);\n    } else {\n      var param = {\n        newNode: {\n          x: x,\n          y: y,\n          \"class\": nodeParams,\n          id: id,\n          parent: parent,\n          visibility: visibility\n        }\n      };\n      var result = cy.undoRedo()[\"do\"](\"addNode\", param);\n      return result.eles;\n    }\n  };\n\n  /*\r\n   * Adds a new edge with the given class and having the given source and target ids. Considers undoable option.\r\n   */\n  mainUtilities.addEdge = function (source, target, edgeParams, invalidEdgeCallback, id, visibility) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // update map type\n    if (_typeof(edgeParams) == 'object') {\n\n      /*  if (!elementUtilities.getMapType())\r\n         elementUtilities.setMapType(edgeParams.language);\r\n       else if (elementUtilities.getMapType() != edgeParams.language)\r\n         elementUtilities.setMapType(\"HybridAny\"); */\n    }\n    // Get the validation result\n    var edgeclass = edgeParams[\"class\"] ? edgeParams[\"class\"] : edgeParams;\n    var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(source), cy.getElementById(target));\n\n    // If validation result is 'invalid' cancel the operation\n    if (validation === 'invalid') {\n      if (typeof invalidEdgeCallback === \"function\") {\n        invalidEdgeCallback();\n      }\n      return;\n    }\n\n    // If validation result is 'reverse' reverse the source-target pair before creating the edge\n    if (validation === 'reverse') {\n      var temp = source;\n      source = target;\n      target = temp;\n    }\n    if (!options.undoable) {\n      return elementUtilities.addEdge(source, target, edgeParams, id, visibility);\n    } else {\n      var param = {\n        newEdge: {\n          source: source,\n          target: target,\n          \"class\": edgeParams,\n          id: id,\n          visibility: visibility\n        }\n      };\n      var result = cy.undoRedo()[\"do\"](\"addEdge\", param);\n      return result.eles;\n    }\n  };\n\n  /*\r\n   * Adds a process with convenient edges. For more information please see 'https://github.com/iVis-at-Bilkent/newt/issues/9'.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.addProcessWithConvenientEdges = function (_source, _target, processType) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n\n    // If source and target IDs are given get the elements by IDs\n    var source = typeof _source === 'string' ? cy.getElementById(_source) : _source;\n    var target = typeof _target === 'string' ? cy.getElementById(_target) : _target;\n\n    // If source or target does not have an EPN class the operation is not valid\n    if (!elementUtilities.isEPNClass(source) || !elementUtilities.isEPNClass(target)) {\n      return;\n    }\n    if (!options.undoable) {\n      return elementUtilities.addProcessWithConvenientEdges(_source, _target, processType);\n    } else {\n      var param = {\n        source: _source,\n        target: _target,\n        processType: processType\n      };\n      cy.undoRedo()[\"do\"](\"addProcessWithConvenientEdges\", param);\n    }\n  };\n\n  // convert collapsed compound nodes to simple nodes\n  // and update port values of pasted nodes and edges\n  var cloneCollapsedNodesAndPorts = function cloneCollapsedNodesAndPorts(elesBefore) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    cy.elements().unselect();\n    var elesAfter = cy.elements();\n    var elesDiff = elesAfter.diff(elesBefore).left;\n\n    // shallow copy collapsed nodes - collapsed compounds become simple nodes\n    // data related to collapsed nodes are removed from generated clones\n    // related issue: https://github.com/iVis-at-Bilkent/newt/issues/145\n    var collapsedNodes = elesDiff.filter('node.cy-expand-collapse-collapsed-node');\n    collapsedNodes.connectedEdges().remove();\n    collapsedNodes.removeClass('cy-expand-collapse-collapsed-node');\n    collapsedNodes.removeData('collapsedChildren');\n    collapsedNodes.removeData('position-before-collapse size-before-collapse');\n    collapsedNodes.removeData('expandcollapseRenderedCueSize expandcollapseRenderedStartX expandcollapseRenderedStartY');\n\n    // cloning ports\n    elesDiff.nodes().forEach(function (_node) {\n      if (_node.data(\"ports\").length == 2) {\n        var oldPortName0 = _node.data(\"ports\")[0].id;\n        var oldPortName1 = _node.data(\"ports\")[1].id;\n        _node.data(\"ports\")[0].id = _node.id() + \".1\";\n        _node.data(\"ports\")[1].id = _node.id() + \".2\";\n        _node.outgoers().edges().forEach(function (_edge) {\n          if (_edge.data(\"portsource\") == oldPortName0) {\n            _edge.data(\"portsource\", _node.data(\"ports\")[0].id);\n          } else if (_edge.data(\"portsource\") == oldPortName1) {\n            _edge.data(\"portsource\", _node.data(\"ports\")[1].id);\n          } else {\n            _edge.data(\"portsource\", _node.id());\n          }\n        });\n        _node.incomers().edges().forEach(function (_edge) {\n          if (_edge.data(\"porttarget\") == oldPortName0) {\n            _edge.data(\"porttarget\", _node.data(\"ports\")[0].id);\n          } else if (_edge.data(\"porttarget\") == oldPortName1) {\n            _edge.data(\"porttarget\", _node.data(\"ports\")[1].id);\n          } else {\n            _edge.data(\"porttarget\", _node.id());\n          }\n        });\n      } else {\n        _node.outgoers().edges().forEach(function (_edge) {\n          _edge.data(\"portsource\", _node.id());\n        });\n        _node.incomers().edges().forEach(function (_edge) {\n          _edge.data(\"porttarget\", _node.id());\n        });\n      }\n    });\n    elesDiff.select();\n  };\n\n  /*\r\n   * Clone given elements. Considers undoable option. Requires cytoscape-clipboard extension.\r\n   */\n  mainUtilities.cloneElements = function (eles, pasteAtMouseLoc) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (eles.length === 0) {\n      return;\n    }\n    this.copyElements(eles);\n    this.pasteElements(pasteAtMouseLoc);\n  };\n\n  /*\r\n   * Copy given elements to clipboard. Requires cytoscape-clipboard extension.\r\n   */\n  mainUtilities.copyElements = function (eles) {\n    cy.clipboard().copy(eles);\n  };\n\n  /*\r\n   * Paste the elements copied to clipboard. Considers undoable option. Requires cytoscape-clipboard extension.\r\n   */\n  mainUtilities.pasteElements = function (pasteAtMouseLoc) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    var elesBefore = cy.elements();\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"paste\", {\n        pasteAtMouseLoc: pasteAtMouseLoc\n      });\n    } else {\n      cy.clipboard().paste();\n    }\n    cloneCollapsedNodesAndPorts(elesBefore);\n    cy.nodes(\":selected\").emit('data');\n  };\n\n  /*\r\n   * Aligns given nodes in given horizontal and vertical order.\r\n   * Horizontal and vertical parameters may be 'none' or undefined.\r\n   * alignTo parameter indicates the leading node.\r\n   * Requrires cytoscape-grid-guide extension and considers undoable option.\r\n   */\n  mainUtilities.align = function (nodes, horizontal, vertical, alignTo) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"align\", {\n        nodes: nodes,\n        horizontal: horizontal,\n        vertical: vertical,\n        alignTo: alignTo\n      });\n    } else {\n      nodes.align(horizontal, vertical, alignTo);\n    }\n    if (cy.edges(\":selected\").length == 1) {\n      cy.edges().unselect();\n    }\n  };\n\n  /*\r\n   * Create compound for given nodes. compoundType may be 'complex' or 'compartment'.\r\n   * This method considers undoable option.\r\n   */\n  mainUtilities.createCompoundForGivenNodes = function (_nodes, compoundType) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    var nodes = _nodes;\n    /*\r\n     * Eleminate the nodes which cannot have a parent with given compound type\r\n     */\n    nodes = _nodes.filter(function (element, i) {\n      if (typeof element === \"number\") {\n        element = i;\n      }\n      var sbgnclass = element.data(\"class\");\n      return elementUtilities.isValidParent(sbgnclass, compoundType, element);\n    });\n    nodes = elementUtilities.getTopMostNodes(nodes);\n\n    // All elements should have the same parent and the common parent should not be a 'complex'\n    // if compoundType is 'compartent'\n    // because the old common parent will be the parent of the new compartment after this operation and\n    // 'complexes' cannot include 'compartments'\n    if (nodes.length == 0 || !elementUtilities.allHaveTheSameParent(nodes) || (compoundType === 'compartment' || compoundType == 'submap') && nodes.parent().data('class') && nodes.parent().data('class').startsWith('complex')) {\n      return;\n    }\n    if (cy.undoRedo()) {\n      var param = {\n        compoundType: compoundType,\n        nodesToMakeCompound: nodes\n      };\n      cy.undoRedo()[\"do\"](\"createCompoundForGivenNodes\", param);\n    } else {\n      elementUtilities.createCompoundForGivenNodes(nodes, compoundType);\n    }\n  };\n\n  /*\r\n   * Move the nodes to a new parent and change their position if possDiff params are set.\r\n   * Considers undoable option and checks if the operation is valid.\r\n   */\n  mainUtilities.changeParent = function (nodes, _newParent, posDiffX, posDiffY) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    var newParent = typeof _newParent === 'string' ? cy.getElementById(_newParent) : _newParent;\n    // New parent is supposed to be one of the root, a complex or a compartment\n    if (newParent && !newParent.data(\"class\").startsWith(\"complex\") && newParent.data(\"class\") != \"compartment\" && newParent.data(\"class\") != \"submap\") {\n      return;\n    }\n    /*\r\n     * Eleminate the nodes which cannot have the newParent as their parent\r\n     */\n    nodes = nodes.filter(function (element, i) {\n      if (typeof element === \"number\") {\n        element = i;\n      }\n      var sbgnclass = element.data(\"class\");\n      return elementUtilities.isValidParent(sbgnclass, newParent, element);\n    });\n\n    // Discard the nodes whose parent is already newParent.\n    // Discard the newParent itself if it is among the nodes\n    nodes = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      // Discard the newParent if it is among the nodes\n      if (newParent && ele.id() === newParent.id()) {\n        return false;\n      }\n      // Discard the nodes whose parent is already newParent\n      if (!newParent) {\n        return ele.data('parent') != null;\n      }\n      return ele.data('parent') !== newParent.id();\n    });\n\n    // If some nodes are ancestor of new parent eleminate them\n    if (newParent) {\n      nodes = nodes.difference(newParent.ancestors());\n    }\n\n    // If all nodes are eleminated return directly\n    if (nodes.length === 0) {\n      return;\n    }\n\n    // Just move the top most nodes\n    nodes = elementUtilities.getTopMostNodes(nodes);\n    var parentId = newParent ? newParent.id() : null;\n    if (options.undoable) {\n      var param = {\n        firstTime: true,\n        parentData: parentId,\n        // It keeps the newParentId (Just an id for each nodes for the first time)\n        nodes: nodes,\n        posDiffX: posDiffX,\n        posDiffY: posDiffY,\n        // This is needed because the changeParent function called is not from elementUtilities\n        // but from the undoRedo extension directly, so maintaining pointer is not automatically done.\n        callback: elementUtilities.maintainPointer\n      };\n      cy.undoRedo()[\"do\"](\"changeParent\", param); // This action is registered by undoRedo extension\n    } else {\n      elementUtilities.changeParent(nodes, parentId, posDiffX, posDiffY);\n    }\n  };\n\n  /*\r\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\r\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\r\n   */\n  mainUtilities.createTranslationReaction = function (mRnaName, proteinName, processPosition, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranslationReaction(mRnaName, proteinName, processPosition, edgeLength);\n    } else {\n      var param = {\n        mRnaName: mRnaName,\n        proteinName: proteinName,\n        processPosition: processPosition,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createTranslationReaction\", param);\n    }\n  };\n\n  /*\r\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\r\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\r\n   */\n  mainUtilities.createTranscriptionReaction = function (geneName, mRnaName, processPosition, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranscriptionReaction(geneName, mRnaName, processPosition, edgeLength);\n    } else {\n      var param = {\n        geneName: geneName,\n        mRnaName: mRnaName,\n        processPosition: processPosition,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createTranscriptionReaction\", param);\n    }\n  };\n  mainUtilities.createTranslation = function (regulatorLabel, outputLabel, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranslation(regulatorLabel, outputLabel, orientation);\n    } else {\n      var param = {\n        regulatorLabel: regulatorLabel,\n        outputLabel: outputLabel,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createTranslation\", param);\n    }\n  };\n  mainUtilities.createTranscription = function (label, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createTranscription(label, orientation);\n    } else {\n      var param = {\n        label: label,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createTranscription\", param);\n    }\n  };\n  mainUtilities.createDegradation = function (macromolecule, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createDegradation(macromolecule, orientation);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createDegradation\", param);\n    }\n  };\n  mainUtilities.createComplexProteinFormation = function (proteinLabels, complexLabel, regulator, orientation, reverse) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createComplexProteinFormation(proteinLabels, complexLabel, regulator, orientation, reverse);\n    } else {\n      var param = {\n        proteinLabels: proteinLabels,\n        complexLabel: complexLabel,\n        regulator: regulator,\n        orientation: orientation,\n        reverse: reverse\n      };\n      cy.undoRedo()[\"do\"](\"createComplexProteinFormation\", param);\n    }\n  };\n  mainUtilities.createMultimerization = function (macromolecule, regulator, regulatorMultimer, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createMultimerization(macromolecule, regulator, regulatorMultimer, orientation);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createMultimerization\", param);\n    }\n  };\n  mainUtilities.createConversion = function (macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createConversion(macromolecule, regulator, regulatorMultimer, orientation, inputInfoboxLabels, outputInfoboxLabels);\n    } else {\n      var param = {\n        macromolecule: macromolecule,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation,\n        inputInfoboxLabels: inputInfoboxLabels,\n        outputInfoboxLabels: outputInfoboxLabels\n      };\n      cy.undoRedo()[\"do\"](\"createConversion\", param);\n    }\n  };\n  mainUtilities.createMetabolicReaction = function (inputs, outputs, reversible, regulator, regulatorMultimer, orientation) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createMetabolicReaction(inputs, outputs, reversible, regulator, regulatorMultimer, orientation);\n    } else {\n      var param = {\n        inputs: inputs,\n        outputs: outputs,\n        reversible: reversible,\n        regulator: regulator,\n        regulatorMultimer: regulatorMultimer,\n        orientation: orientation\n      };\n      cy.undoRedo()[\"do\"](\"createMetabolicReaction\", param);\n    }\n  };\n\n  /*\r\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\r\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\r\n   */\n  mainUtilities.createMetabolicCatalyticActivity = function (inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createMetabolicCatalyticActivity(inputNodeList, outputNodeList, catalystName, catalystType, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength);\n    } else {\n      var param = {\n        inputNodeList: inputNodeList,\n        outputNodeList: outputNodeList,\n        catalystName: catalystName,\n        catalystType: catalystType,\n        processPosition: processPosition,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        edgeLength: edgeLength\n      };\n      cy.undoRedo()[\"do\"](\"createMetabolicCatalyticActivity\", param);\n    }\n  };\n\n  /*\r\n   * Creates an activation reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\r\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\r\n   */\n  mainUtilities.createActivationReaction = function (proteinName, processPosition, edgeLength, reverse) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.createActivationReaction(proteinName, processPosition, edgeLength, reverse);\n    } else {\n      var param = {\n        proteinName: proteinName,\n        processPosition: processPosition,\n        edgeLength: edgeLength,\n        reverse: reverse\n      };\n      cy.undoRedo()[\"do\"](\"createActivationReaction\", param);\n    }\n  };\n\n  /*\r\n   * Creates a template reaction with given parameters. Requires cose-bilkent layout to tile the free macromolecules included\r\n   * in the complex. Considers undoable option. For more information see the same function in elementUtilities\r\n   */\n  mainUtilities.createTemplateReaction = function (templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    }\n    if (!options.undoable) {\n      if (templateType === \"reversible\") {\n        elementUtilities.setMapType(\"HybridAny\");\n      }\n      elementUtilities.createTemplateReaction(templateType, macromoleculeList, complexName, processPosition, tilingPaddingVertical, tilingPaddingHorizontal, edgeLength, layoutParam);\n    } else {\n      var param = {\n        templateType: templateType,\n        macromoleculeList: macromoleculeList,\n        complexName: complexName,\n        processPosition: processPosition,\n        tilingPaddingVertical: tilingPaddingVertical,\n        tilingPaddingHorizontal: tilingPaddingHorizontal,\n        edgeLength: edgeLength,\n        layoutParam: layoutParam\n      };\n      if (templateType === \"reversible\") {\n        var actions = [];\n        actions.push({\n          name: \"changeMapType\",\n          param: {\n            mapType: \"HybridAny\",\n            callback: function callback() {}\n          }\n        });\n        actions.push({\n          name: \"createTemplateReaction\",\n          param: param\n        });\n        cy.undoRedo()[\"do\"](\"batch\", actions);\n      } else {\n        cy.undoRedo()[\"do\"](\"createTemplateReaction\", param);\n      }\n    }\n  };\n\n  /*\r\n   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.resizeNodes = function (nodes, width, height, useAspectRatio, preserveRelativePos) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        nodes: nodes,\n        width: width,\n        height: height,\n        useAspectRatio: useAspectRatio,\n        performOperation: true,\n        preserveRelativePos: preserveRelativePos\n      };\n      cy.undoRedo()[\"do\"](\"resizeNodes\", param);\n    } else {\n      elementUtilities.resizeNodes(nodes, width, height, useAspectRatio);\n      cy.style().update();\n    }\n  };\n\n  /*\r\n   * Resize given nodes if useAspectRatio is truthy one of width or height should not be set.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.resizeNodesToContent = function (nodes, useAspectRatio) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var actions = [];\n      nodes.forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        var height = elementUtilities.calculateMinHeight(node);\n        actions.push({\n          name: \"resizeNodes\",\n          param: {\n            nodes: node,\n            width: width,\n            height: height,\n            useAspectRatio: useAspectRatio,\n            performOperation: true,\n            preserveRelativePos: true\n          }\n        });\n        var stateAndInfos = node.data('statesandinfos');\n        var length = stateAndInfos.length;\n        if (length != 0) {\n          var param = {\n            node: node,\n            locations: [\"top\", \"right\", \"bottom\", \"left\"]\n          };\n          actions.push({\n            name: \"fitUnits\",\n            param: param\n          });\n        }\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n      cy.style().update();\n      return actions;\n    } else {\n      nodes.forEach(function (node) {\n        var width = elementUtilities.calculateMinWidth(node);\n        var height = elementUtilities.calculateMinHeight(node);\n        elementUtilities.resizeNodes(node, width, height, useAspectRatio, true);\n      });\n    }\n    cy.style().update();\n  };\n\n  /*\r\n   * Changes the label of the given nodes to the given label. Considers undoable option.\r\n   */\n  mainUtilities.changeNodeLabel = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(nodes, label) {\n      var param;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(nodes.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 2:\n            if (!options.undoable) {\n              nodes.data('label', label);\n            } else {\n              param = {\n                nodes: nodes,\n                label: label,\n                firstTime: true\n              };\n              cy.undoRedo()[\"do\"](\"changeNodeLabel\", param);\n            }\n            cy.style().update();\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /*\r\n   * Change font properties for given nodes use the given font data.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.changeFontProperties = function (eles, data) {\n    if (eles.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        eles: eles,\n        data: data,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"changeFontProperties\", param);\n    } else {\n      elementUtilities.changeFontProperties(eles, data);\n    }\n    cy.style().update();\n  };\n\n  /*\r\n   * Change state value or unit of information box of given nodes with given index.\r\n   * Considers undoable option.\r\n   * For more information about the parameters see elementUtilities.changeStateOrInfoBox\r\n   */\n  mainUtilities.changeStateOrInfoBox = function (nodes, index, value, type) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        index: index,\n        value: value,\n        type: type,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"changeStateOrInfoBox\", param);\n    } else {\n      return elementUtilities.changeStateOrInfoBox(nodes, index, value, type);\n    }\n    cy.style().update();\n  };\n\n  // Add a new state or info box to given nodes.\n  // The box is represented by the parameter obj.\n  // Considers undoable option.\n  mainUtilities.addStateOrInfoBox = function (nodes, obj) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.addStateOrInfoBox(nodes, obj);\n    } else {\n      var param = {\n        obj: obj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"addStateOrInfoBox\", param);\n    }\n    cy.style().update();\n  };\n\n  // Remove the state or info boxes of the given nodes at given index.\n  // Considers undoable option.\n  mainUtilities.removeStateOrInfoBox = function (nodes, index) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.removeStateOrInfoBox(nodes, {\n        index: index\n      });\n    } else {\n      var param = {\n        locationObj: {\n          index: index\n        },\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"removeStateOrInfoBox\", param);\n    }\n    cy.style().update();\n  };\n\n  //Arrange information boxes\n  //If force check is true, it rearranges all information boxes\n  mainUtilities.fitUnits = function (node, locations) {\n    if (node.data('auxunitlayouts') === undefined || node.data('statesandinfos').length <= 0) {\n      return;\n    }\n    if (locations === undefined || locations.length <= 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.fitUnits(node, locations);\n    } else {\n      var param = {\n        node: node,\n        locations: locations\n      };\n      cy.undoRedo()[\"do\"](\"fitUnits\", param);\n    }\n    cy.style().update();\n  };\n\n  /*\r\n   * Set multimer status of the given nodes to the given status.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.setMultimerStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setMultimerStatus\", param);\n    } else {\n      elementUtilities.setMultimerStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n  mainUtilities.setActiveStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setActiveStatus\", param);\n    } else {\n      elementUtilities.setActiveStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n  mainUtilities.setHypotheticalStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setHypotheticalStatus\", param);\n    } else {\n      elementUtilities.setHypotheticalStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n\n  /**\r\n   * Redraw clone markers on given nodes without considering undo.\r\n   * See https://github.com/iVis-at-Bilkent/newt/issues/574 \r\n   */\n  mainUtilities.redrawCloneMarkers = function (nodes) {\n    elementUtilities.setCloneMarkerStatus(nodes, true);\n  };\n\n  /*\r\n   * Set clone marker status of given nodes to the given status.\r\n   * Considers undoable option.\r\n   */\n  mainUtilities.setCloneMarkerStatus = function (nodes, status) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        status: status,\n        nodes: nodes,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"setCloneMarkerStatus\", param);\n    } else {\n      elementUtilities.setCloneMarkerStatus(nodes, status);\n    }\n    cy.style().update();\n  };\n\n  /*\r\n   * Change style/css of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be\r\n   * a single string or an id to value map). Considers undoable option.\r\n   */\n  mainUtilities.changeCss = function (eles, name, valueMap) {\n    if (eles.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.changeCss(eles, name, valueMap);\n    } else {\n      var param = {\n        eles: eles,\n        valueMap: valueMap,\n        name: name\n      };\n      cy.undoRedo()[\"do\"](\"changeCss\", param);\n    }\n    cy.style().update();\n  };\n\n  /*\r\n   * Change data of given eles by setting getting property name to the given given value/values (Note that valueMap parameter may be\r\n   * a single string or an id to value map). Considers undoable option.\r\n   */\n  mainUtilities.changeData = function (eles, name, valueMap) {\n    console.log('eqwr1');\n    if (eles.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.changeData(eles, name, valueMap);\n    } else {\n      var param = {\n        eles: eles,\n        valueMap: valueMap,\n        name: name\n      };\n      cy.undoRedo()[\"do\"](\"changeData\", param);\n    }\n    cy.style().update();\n  };\n  mainUtilities.updateSetField = function (ele, fieldName, toDelete, toAdd, callback) {\n    if (!options.undoable) {\n      elementUtilities.changeData(ele, fieldName, toDelete, toAdd, callback);\n    } else {\n      var param = {\n        ele: ele,\n        fieldName: fieldName,\n        toDelete: toDelete,\n        toAdd: toAdd,\n        callback: callback\n      };\n      cy.undoRedo()[\"do\"](\"updateSetField\", param);\n    }\n  };\n  mainUtilities.setDefaultProperty = function (_class, name, value) {\n    if (!options.undoable) {\n      var propMap = {};\n      propMap[name] = value;\n      elementUtilities.setDefaultProperties(_class, propMap);\n    } else {\n      var param = {\n        \"class\": _class,\n        name: name,\n        value: value\n      };\n      cy.undoRedo()[\"do\"](\"setDefaultProperty\", param);\n    }\n  };\n  mainUtilities.updateInfoboxStyle = function (node, index, newProps) {\n    if (!options.undoable) {\n      elementUtilities.updateInfoboxStyle(node, index, newProps);\n    } else {\n      var param = {\n        node: node,\n        index: index,\n        newProps: newProps\n      };\n      cy.undoRedo()[\"do\"](\"updateInfoboxStyle\", param);\n    }\n    cy.style().update();\n  };\n  mainUtilities.updateInfoboxObj = function (node, index, newProps) {\n    if (!options.undoable) {\n      elementUtilities.updateInfoboxObj(node, index, newProps);\n    } else {\n      var param = {\n        node: node,\n        index: index,\n        newProps: newProps\n      };\n      cy.undoRedo()[\"do\"](\"updateInfoboxObj\", param);\n    }\n    cy.style().update();\n  };\n  mainUtilities.deleteAndPerformLayout = function (eles, layoutparam) {\n    var nodes = eles.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToKeep = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToRemove = allNodes.not(nodesToKeep);\n    if (nodesToRemove.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      elementUtilities.deleteAndPerformLayout(nodesToRemove, layoutparam);\n    } else {\n      var param = {\n        eles: nodesToRemove,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      cy.undoRedo()[\"do\"](\"deleteAndPerformLayout\", param);\n    }\n  };\n\n  /*\r\n   * Hides given eles (the ones which are selected) and perform given layout afterward. Layout parameter may be layout options\r\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\r\n   */\n  mainUtilities.hideAndPerformLayout = function (eles, layoutparam) {\n    var nodes = eles.nodes(); // Ensure that nodes list just include nodes\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n    if (nodesToHide.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.hideAndPerformLayout(nodesToHide, layoutparam);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);\n    } else {\n      var param = {\n        eles: nodesToHide,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hideAndPerformLayout\",\n        param: param\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n\n  /*\r\n   * Shows all elements (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options\r\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\r\n   */\n  mainUtilities.showAllAndPerformLayout = function (layoutparam) {\n    var hiddenEles = cy.elements(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);\n    } else {\n      var param = {\n        eles: hiddenEles,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"showAndPerformLayout\",\n        param: param\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n\n  /*\r\n   * Unhide given eles (the ones which are hidden if any) and perform given layout afterward. Layout parameter may be layout options\r\n   * or a function to call. Requires viewUtilities extension and considers undoable option.\r\n   */\n  mainUtilities.showAndPerformLayout = function (mainEle, eles, layoutparam) {\n    var hiddenEles = eles.filter(':hidden');\n    if (hiddenEles.length === 0) {\n      return;\n    }\n    mainUtilities.closeUpElements(mainEle, hiddenEles.nodes());\n    if (!options.undoable) {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thinBorder(nodesWithHiddenNeighbor);\n      elementUtilities.showAndPerformLayout(hiddenEles, layoutparam);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      sbgnvizInstance.thickenBorder(nodesWithHiddenNeighbor);\n    } else {\n      var param = {\n        eles: hiddenEles,\n        layoutparam: layoutparam,\n        firstTime: true\n      };\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", sbgnvizInstance.thickenBorder, sbgnvizInstance.thinBorder);\n      ur.action(\"thinBorder\", sbgnvizInstance.thinBorder, sbgnvizInstance.thickenBorder);\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"showAndPerformLayout\",\n        param: param\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    }\n  };\n\n  /*\r\n  * Takes the hidden elements close to the nodes whose neighbors will be shown\r\n  * */\n  mainUtilities.closeUpElements = function (mainEle, hiddenEles) {\n    var leftX = Number.MAX_VALUE;\n    var rightX = Number.MIN_VALUE;\n    var topY = Number.MAX_VALUE;\n    var bottomY = Number.MIN_VALUE;\n    // Check the x and y limits of all hidden elements and store them in the variables above\n    hiddenEles.forEach(function (ele) {\n      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {\n        var halfWidth = ele.outerWidth() / 2;\n        var halfHeight = ele.outerHeight() / 2;\n        if (ele.position(\"x\") - halfWidth < leftX) leftX = ele.position(\"x\") - halfWidth;\n        if (ele.position(\"x\") + halfWidth > rightX) rightX = ele.position(\"x\") + halfWidth;\n        if (ele.position(\"y\") - halfHeight < topY) topY = ele.position(\"y\") - halfHeight;\n        if (ele.position(\"y\") + halfHeight > topY) bottomY = ele.position(\"y\") + halfHeight;\n      }\n    });\n\n    //The coordinates of the old center containing the hidden nodes\n    var oldCenterX = (leftX + rightX) / 2;\n    var oldCenterY = (topY + bottomY) / 2;\n\n    //Here we calculate two parameters which define the area in which the hidden elements are placed initially\n    var minHorizontalParam = mainEle.outerWidth() / 2 + (rightX - leftX) / 2;\n    var maxHorizontalParam = mainEle.outerWidth() + (rightX - leftX) / 2;\n    var minVerticalParam = mainEle.outerHeight() / 2 + (bottomY - topY) / 2;\n    var maxVerticalParam = mainEle.outerHeight() + (bottomY - topY) / 2;\n\n    //Quadrants is an object of the form {first:\"obtained\", second:\"free\", third:\"free\", fourth:\"obtained\"}\n    // which holds which quadrant are free (that's where hidden nodes will be brought)\n    var quadrants = mainUtilities.checkOccupiedQuadrants(mainEle, hiddenEles);\n    var freeQuadrants = [];\n    for (var property in quadrants) {\n      if (quadrants[property] === \"free\") freeQuadrants.push(property);\n    }\n\n    //Can take values 1 and -1 and are used to place the hidden nodes in the random quadrant\n    var horizontalMult;\n    var verticalMult;\n    if (freeQuadrants.length > 0) {\n      if (freeQuadrants.length === 3) {\n        if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('third')) {\n          horizontalMult = -1;\n          verticalMult = -1;\n        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('second') && freeQuadrants.includes('fourth')) {\n          horizontalMult = 1;\n          verticalMult = -1;\n        } else if (freeQuadrants.includes('first') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {\n          horizontalMult = 1;\n          verticalMult = 1;\n        } else if (freeQuadrants.includes('second') && freeQuadrants.includes('third') && freeQuadrants.includes('fourth')) {\n          horizontalMult = -1;\n          verticalMult = 1;\n        }\n      } else {\n        //Randomly picks one quadrant from the free quadrants\n        var randomQuadrant = freeQuadrants[Math.floor(Math.random() * freeQuadrants.length)];\n        if (randomQuadrant === \"first\") {\n          horizontalMult = 1;\n          verticalMult = -1;\n        } else if (randomQuadrant === \"second\") {\n          horizontalMult = -1;\n          verticalMult = -1;\n        } else if (randomQuadrant === \"third\") {\n          horizontalMult = -1;\n          verticalMult = 1;\n        } else if (randomQuadrant === \"fourth\") {\n          horizontalMult = 1;\n          verticalMult = 1;\n        }\n      }\n    } else {\n      horizontalMult = 0;\n      verticalMult = 0;\n    }\n    // If the horizontalMult is 0 it means that no quadrant is free, so we randomly choose a quadrant\n    var horizontalParam = mainUtilities.generateRandom(minHorizontalParam, maxHorizontalParam, horizontalMult);\n    var verticalParam = mainUtilities.generateRandom(minVerticalParam, maxVerticalParam, verticalMult);\n\n    //The coordinates of the center where the hidden nodes will be transfered\n    var newCenterX = mainEle.position(\"x\") + horizontalParam;\n    var newCenterY = mainEle.position(\"y\") + verticalParam;\n    var xdiff = newCenterX - oldCenterX;\n    var ydiff = newCenterY - oldCenterY;\n\n    //Change the position of hidden elements\n    hiddenEles.forEach(function (ele) {\n      var newx = ele.position(\"x\") + xdiff;\n      var newy = ele.position(\"y\") + ydiff;\n      ele.position(\"x\", newx);\n      ele.position(\"y\", newy);\n    });\n  };\n\n  /*\r\n   * Generates a number between 2 nr and multimplies it with 1 or -1\r\n   * */\n  mainUtilities.generateRandom = function (min, max, mult) {\n    var val = [-1, 1];\n    if (mult === 0) mult = val[Math.floor(Math.random() * val.length)];\n    return (Math.floor(Math.random() * (max - min + 1)) + min) * mult;\n  };\n\n  /*\r\n   * This function makes sure that the random number lies in free quadrant\r\n   * */\n  mainUtilities.checkOccupiedQuadrants = function (mainEle, hiddenEles) {\n    if (elementUtilities.getMapType() == 'PD') {\n      var visibleNeighborEles = mainEle.neighborhood().difference(hiddenEles).nodes();\n      var visibleNeighborsOfNeighbors = visibleNeighborEles.neighborhood().difference(hiddenEles).difference(mainEle).nodes();\n      var visibleEles = visibleNeighborEles.union(visibleNeighborsOfNeighbors);\n    } else var visibleEles = mainEle.neighborhood().difference(hiddenEles).nodes();\n    var occupiedQuadrants = {\n      first: \"free\",\n      second: \"free\",\n      third: \"free\",\n      fourth: \"free\"\n    };\n    visibleEles.forEach(function (ele) {\n      if (ele.data('class') != 'compartment' && ele.data('class') != 'complex') {\n        if (ele.position(\"x\") < mainEle.position(\"x\") && ele.position(\"y\") < mainEle.position(\"y\")) occupiedQuadrants.second = \"occupied\";else if (ele.position(\"x\") > mainEle.position(\"x\") && ele.position(\"y\") < mainEle.position(\"y\")) occupiedQuadrants.first = \"occupied\";else if (ele.position(\"x\") < mainEle.position(\"x\") && ele.position(\"y\") > mainEle.position(\"y\")) occupiedQuadrants.third = \"occupied\";else if (ele.position(\"x\") > mainEle.position(\"x\") && ele.position(\"y\") > mainEle.position(\"y\")) occupiedQuadrants.fourth = \"occupied\";\n      }\n    });\n    return occupiedQuadrants;\n  };\n\n  // Overrides highlightProcesses from SBGNVIZ - do not highlight any nodes when the map type is AF\n  mainUtilities.highlightProcesses = function (_nodes) {\n    if (elementUtilities.getMapType() == \"AF\") return;\n    sbgnvizInstance.highlightProcesses(_nodes);\n  };\n\n  /**\r\n   * Resets map type to undefined\r\n   */\n  mainUtilities.resetMapType = function () {\n    elementUtilities.resetMapType();\n  };\n\n  /**\r\n   * return : map type\r\n   */\n  mainUtilities.getMapType = function () {\n    return elementUtilities.getMapType();\n  };\n  mainUtilities.addBackgroundImage = function (nodes, bgObj, updateInfo, promptInvalidImage, validateURL) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n    bgObj['firstTime'] = true;\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      cy.undoRedo()[\"do\"](\"addBackgroundImage\", param);\n    } else {\n      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);\n    }\n    cy.style().update();\n  };\n  mainUtilities.removeBackgroundImage = function (nodes, bgObj) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n    bgObj['firstTime'] = true;\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"removeBackgroundImage\", param);\n    } else {\n      elementUtilities.removeBackgroundImage(nodes, bgObj);\n    }\n    cy.style().update();\n  };\n  mainUtilities.updateBackgroundImage = function (nodes, bgObj) {\n    if (nodes.length === 0 || !bgObj) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        bgObj: bgObj,\n        nodes: nodes\n      };\n      cy.undoRedo()[\"do\"](\"updateBackgroundImage\", param);\n    } else {\n      elementUtilities.updateBackgroundImage(nodes, bgObj);\n    }\n    cy.style().update();\n  };\n  mainUtilities.changeBackgroundImage = function (nodes, oldImg, newImg, updateInfo, promptInvalidImage, validateURL) {\n    if (nodes.length === 0 || !oldImg || !newImg) {\n      return;\n    }\n    if (options.undoable) {\n      var param = {\n        oldImg: oldImg,\n        newImg: newImg,\n        nodes: nodes,\n        firstTime: true,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      cy.undoRedo()[\"do\"](\"changeBackgroundImage\", param);\n    } else {\n      elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, true, updateInfo, promptInvalidImage, validateURL);\n    }\n    cy.style().update();\n  };\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\r\n *  Extend default options and get current options by using this file\r\n */\n\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer nesting on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // percentage used to calculate compound paddings\n    compoundPadding: function compoundPadding() {\n      return 10;\n    },\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true,\n    // Whether to have undoable drag feature in undo/redo extension. This options will be passed to undo/redo extension\n    undoableDrag: true\n  };\n  var optionUtilities = function optionUtilities() {};\n\n  // Extend the defaults options with the user options\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n    optionUtilities.options = result;\n    return options;\n  };\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL29wdGlvbi11dGlsaXRpZXMtZmFjdG9yeS5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0cyIsImltZ1BhdGgiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJkeW5hbWljTGFiZWxTaXplIiwiaW5mZXJOZXN0aW5nT25Mb2FkIiwiY29tcG91bmRQYWRkaW5nIiwibmV0d29ya0NvbnRhaW5lclNlbGVjdG9yIiwidW5kb2FibGUiLCJ1bmRvYWJsZURyYWciLCJvcHRpb25VdGlsaXRpZXMiLCJleHRlbmRPcHRpb25zIiwib3B0aW9ucyIsInJlc3VsdCIsInByb3AiLCJnZXRPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGlzZS8uL3NyYy91dGlsaXRpZXMvb3B0aW9uLXV0aWxpdGllcy1mYWN0b3J5LmpzPzllNDciXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogIEV4dGVuZCBkZWZhdWx0IG9wdGlvbnMgYW5kIGdldCBjdXJyZW50IG9wdGlvbnMgYnkgdXNpbmcgdGhpcyBmaWxlXHJcbiAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xyXG4gIHZhciBkZWZhdWx0cyA9IHtcclxuICAgIC8vIFRoZSBwYXRoIG9mIGNvcmUgbGlicmFyeSBpbWFnZXMgd2hlbiBzYmdudml6IGlzIHJlcXVpcmVkIGZyb20gbnBtIGFuZCB0aGUgaW5kZXggaHRtbFxyXG4gICAgLy8gZmlsZSBhbmQgbm9kZV9tb2R1bGVzIGFyZSB1bmRlciB0aGUgc2FtZSBmb2xkZXIgdGhlbiB1c2luZyB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBmaW5lXHJcbiAgICBpbWdQYXRoOiAnbm9kZV9tb2R1bGVzL3NiZ252aXovc3JjL2ltZycsXHJcbiAgICAvLyBXaGV0aGVyIHRvIGZpdCBsYWJlbHMgdG8gbm9kZXNcclxuICAgIGZpdExhYmVsc1RvTm9kZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGZpdExhYmVsc1RvSW5mb2JveGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvLyBkeW5hbWljIGxhYmVsIHNpemUgaXQgbWF5IGJlICdzbWFsbCcsICdyZWd1bGFyJywgJ2xhcmdlJ1xyXG4gICAgZHluYW1pY0xhYmVsU2l6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gJ3JlZ3VsYXInO1xyXG4gICAgfSxcclxuICAgIC8vIFdoZXRoZXIgdG8gaW5mZXIgbmVzdGluZyBvbiBsb2FkIFxyXG4gICAgaW5mZXJOZXN0aW5nT25Mb2FkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICAvLyBwZXJjZW50YWdlIHVzZWQgdG8gY2FsY3VsYXRlIGNvbXBvdW5kIHBhZGRpbmdzXHJcbiAgICBjb21wb3VuZFBhZGRpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIDEwO1xyXG4gICAgfSxcclxuICAgIC8vIFRoZSBzZWxlY3RvciBvZiB0aGUgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIHNiZ24gbmV0d29ya1xyXG4gICAgbmV0d29ya0NvbnRhaW5lclNlbGVjdG9yOiAnI3NiZ24tbmV0d29yay1jb250YWluZXInLFxyXG4gICAgLy8gV2hldGhlciB0aGUgYWN0aW9ucyBhcmUgdW5kb2FibGUsIHJlcXVpcmVzIGN5dG9zY2FwZS11bmRvLXJlZG8gZXh0ZW5zaW9uXHJcbiAgICB1bmRvYWJsZTogdHJ1ZSxcclxuICAgIC8vIFdoZXRoZXIgdG8gaGF2ZSB1bmRvYWJsZSBkcmFnIGZlYXR1cmUgaW4gdW5kby9yZWRvIGV4dGVuc2lvbi4gVGhpcyBvcHRpb25zIHdpbGwgYmUgcGFzc2VkIHRvIHVuZG8vcmVkbyBleHRlbnNpb25cclxuICAgIHVuZG9hYmxlRHJhZzogdHJ1ZVxyXG4gIH07XHJcblxyXG4gIHZhciBvcHRpb25VdGlsaXRpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgfTtcclxuXHJcbiAgLy8gRXh0ZW5kIHRoZSBkZWZhdWx0cyBvcHRpb25zIHdpdGggdGhlIHVzZXIgb3B0aW9uc1xyXG4gIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuXHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XHJcbiAgICAgIHJlc3VsdFtwcm9wXSA9IGRlZmF1bHRzW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xyXG4gICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvblV0aWxpdGllcy5vcHRpb25zID0gcmVzdWx0O1xyXG5cclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG9wdGlvblV0aWxpdGllcy5vcHRpb25zO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBvcHRpb25VdGlsaXRpZXM7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBRTNCO0VBQ0EsSUFBSUMsUUFBUSxHQUFHO0lBQ2I7SUFDQTtJQUNBQyxPQUFPLEVBQUUsOEJBQThCO0lBQ3ZDO0lBQ0FDLGdCQUFnQixFQUFFLFNBQWxCQSxnQkFBZ0JBLENBQUEsRUFBYztNQUM1QixPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0RDLG9CQUFvQixFQUFFLFNBQXRCQSxvQkFBb0JBLENBQUEsRUFBYztNQUNoQyxPQUFPLEtBQUs7SUFDZCxDQUFDO0lBQ0Q7SUFDQUMsZ0JBQWdCLEVBQUUsU0FBbEJBLGdCQUFnQkEsQ0FBQSxFQUFjO01BQzVCLE9BQU8sU0FBUztJQUNsQixDQUFDO0lBQ0Q7SUFDQUMsa0JBQWtCLEVBQUUsU0FBcEJBLGtCQUFrQkEsQ0FBQSxFQUFjO01BQzlCLE9BQU8sS0FBSztJQUNkLENBQUM7SUFDRDtJQUNBQyxlQUFlLEVBQUUsU0FBakJBLGVBQWVBLENBQUEsRUFBYztNQUMzQixPQUFPLEVBQUU7SUFDWCxDQUFDO0lBQ0Q7SUFDQUMsd0JBQXdCLEVBQUUseUJBQXlCO0lBQ25EO0lBQ0FDLFFBQVEsRUFBRSxJQUFJO0lBQ2Q7SUFDQUMsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFFRCxJQUFJQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUEsRUFBZSxDQUNsQyxDQUFDOztFQUVEO0VBQ0FBLGVBQWUsQ0FBQ0MsYUFBYSxHQUFHLFVBQVVDLE9BQU8sRUFBRTtJQUNqRCxJQUFJQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsS0FBSyxJQUFJQyxJQUFJLElBQUlkLFFBQVEsRUFBRTtNQUN6QmEsTUFBTSxDQUFDQyxJQUFJLENBQUMsR0FBR2QsUUFBUSxDQUFDYyxJQUFJLENBQUM7SUFDL0I7SUFFQSxLQUFLLElBQUlBLElBQUksSUFBSUYsT0FBTyxFQUFFO01BQ3hCQyxNQUFNLENBQUNDLElBQUksQ0FBQyxHQUFHRixPQUFPLENBQUNFLElBQUksQ0FBQztJQUM5QjtJQUVBSixlQUFlLENBQUNFLE9BQU8sR0FBR0MsTUFBTTtJQUVoQyxPQUFPRCxPQUFPO0VBQ2hCLENBQUM7RUFFREYsZUFBZSxDQUFDSyxVQUFVLEdBQUcsWUFBWTtJQUN2QyxPQUFPTCxlQUFlLENBQUNFLE9BQU87RUFDaEMsQ0FBQztFQUVELE9BQU9GLGVBQWU7QUFDeEIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/register-undo-redo-actions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/register-undo-redo-actions-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nvar $ = libs.jQuery;\nmodule.exports = function () {\n  var undoRedoActionFunctions, options, cy;\n  var registerUndoRedoActions = function registerUndoRedoActions(param) {\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    if (!options.undoable) {\n      return;\n    }\n\n    // create undo-redo instance\n    var ur = cy.undoRedo({\n      undoableDrag: options.undoableDrag\n    });\n\n    // register add remove actions\n    ur.action(\"addNode\", undoRedoActionFunctions.addNode, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n    ur.action(\"addEdge\", undoRedoActionFunctions.addEdge, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"addProcessWithConvenientEdges\", undoRedoActionFunctions.addProcessWithConvenientEdges, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"deleteElesSmart\", undoRedoActionFunctions.deleteElesSmart, undoRedoActionFunctions.restoreEles);\n    ur.action(\"createCompoundForGivenNodes\", undoRedoActionFunctions.createCompoundForGivenNodes, undoRedoActionFunctions.createCompoundForGivenNodes);\n\n    // register general actions\n    ur.action(\"resizeNodes\", undoRedoActionFunctions.resizeNodes, undoRedoActionFunctions.resizeNodes);\n    ur.action(\"changeNodeLabel\", undoRedoActionFunctions.changeNodeLabel, undoRedoActionFunctions.changeNodeLabel);\n    ur.action(\"regenerateId\", undoRedoActionFunctions.regenerateId, undoRedoActionFunctions.regenerateId);\n    ur.action(\"changeData\", undoRedoActionFunctions.changeData, undoRedoActionFunctions.changeData);\n    ur.action(\"updateSetField\", undoRedoActionFunctions.updateSetField, undoRedoActionFunctions.updateSetField);\n    ur.action(\"changeCss\", undoRedoActionFunctions.changeCss, undoRedoActionFunctions.changeCss);\n    ur.action(\"changeBendPoints\", undoRedoActionFunctions.changeBendPoints, undoRedoActionFunctions.changeBendPoints);\n    ur.action(\"changeFontProperties\", undoRedoActionFunctions.changeFontProperties, undoRedoActionFunctions.changeFontProperties);\n    ur.action(\"showAndPerformLayout\", undoRedoActionFunctions.showAndPerformLayout, undoRedoActionFunctions.undoShowAndPerformLayout);\n    ur.action(\"hideAndPerformLayout\", undoRedoActionFunctions.hideAndPerformLayout, undoRedoActionFunctions.undoHideAndPerformLayout);\n    ur.action(\"deleteAndPerformLayout\", undoRedoActionFunctions.deleteAndPerformLayout, undoRedoActionFunctions.undoDeleteAndPerformLayout);\n    ur.action(\"applySIFTopologyGrouping\", undoRedoActionFunctions.applySIFTopologyGrouping, undoRedoActionFunctions.applySIFTopologyGrouping);\n\n    // register SBGN actions\n    ur.action(\"addStateOrInfoBox\", undoRedoActionFunctions.addStateOrInfoBox, undoRedoActionFunctions.removeStateOrInfoBox);\n    ur.action(\"changeStateOrInfoBox\", undoRedoActionFunctions.changeStateOrInfoBox, undoRedoActionFunctions.changeStateOrInfoBox);\n    ur.action(\"setMultimerStatus\", undoRedoActionFunctions.setMultimerStatus, undoRedoActionFunctions.setMultimerStatus);\n    ur.action(\"setActiveStatus\", undoRedoActionFunctions.setActiveStatus, undoRedoActionFunctions.setActiveStatus);\n    ur.action(\"setHypotheticalStatus\", undoRedoActionFunctions.setHypotheticalStatus, undoRedoActionFunctions.setHypotheticalStatus);\n    ur.action(\"setCloneMarkerStatus\", undoRedoActionFunctions.setCloneMarkerStatus, undoRedoActionFunctions.setCloneMarkerStatus);\n    ur.action(\"removeStateOrInfoBox\", undoRedoActionFunctions.removeStateOrInfoBox, undoRedoActionFunctions.addStateOrInfoBox);\n    ur.action(\"fitUnits\", undoRedoActionFunctions.fitUnits, undoRedoActionFunctions.restoreUnits);\n    ur.action(\"addBackgroundImage\", undoRedoActionFunctions.addBackgroundImage, undoRedoActionFunctions.removeBackgroundImage);\n    ur.action(\"removeBackgroundImage\", undoRedoActionFunctions.removeBackgroundImage, undoRedoActionFunctions.addBackgroundImage);\n    ur.action(\"updateBackgroundImage\", undoRedoActionFunctions.updateBackgroundImage, undoRedoActionFunctions.updateBackgroundImage);\n    ur.action(\"changeBackgroundImage\", undoRedoActionFunctions.changeBackgroundImage, undoRedoActionFunctions.changeBackgroundImage);\n    ur.action(\"updateInfoboxStyle\", undoRedoActionFunctions.updateInfoboxStyle, undoRedoActionFunctions.updateInfoboxStyle);\n    ur.action(\"updateInfoboxObj\", undoRedoActionFunctions.updateInfoboxObj, undoRedoActionFunctions.updateInfoboxObj);\n\n    // register easy creation actions\n    ur.action(\"createTemplateReaction\", undoRedoActionFunctions.createTemplateReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createActivationReaction\", undoRedoActionFunctions.createActivationReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMetabolicCatalyticActivity\", undoRedoActionFunctions.createMetabolicCatalyticActivity, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMetabolicReaction\", undoRedoActionFunctions.createMetabolicReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createConversion\", undoRedoActionFunctions.createConversion, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createMultimerization\", undoRedoActionFunctions.createMultimerization, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createComplexProteinFormation\", undoRedoActionFunctions.createComplexProteinFormation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createDegradation\", undoRedoActionFunctions.createDegradation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranscription\", undoRedoActionFunctions.createTranscription, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranslation\", undoRedoActionFunctions.createTranslation, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranscriptionReaction\", undoRedoActionFunctions.createTranscriptionReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"createTranslationReaction\", undoRedoActionFunctions.createTranslationReaction, undoRedoActionFunctions.deleteElesSimple);\n    ur.action(\"setDefaultProperty\", undoRedoActionFunctions.setDefaultProperty, undoRedoActionFunctions.setDefaultProperty);\n    ur.action(\"convertIntoReversibleReaction\", undoRedoActionFunctions.convertIntoReversibleReaction, undoRedoActionFunctions.convertIntoReversibleReaction);\n    ur.action(\"moveEdge\", undoRedoActionFunctions.moveEdge, undoRedoActionFunctions.moveEdge);\n    ur.action(\"fixError\", undoRedoActionFunctions.fixError, undoRedoActionFunctions.unfixError);\n    ur.action(\"cloneHighDegreeNode\", undoRedoActionFunctions.cloneHighDegreeNode, undoRedoActionFunctions.unCloneHighDegreeNode);\n    ur.action(\"changeMapType\", undoRedoActionFunctions.changeMapType, undoRedoActionFunctions.changeMapType);\n    ur.action(\"setCompoundPadding\", undoRedoActionFunctions.setCompoundPadding, undoRedoActionFunctions.setCompoundPadding);\n  };\n  return registerUndoRedoActions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/register-undo-redo-actions-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnviz-instance-utilities-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/sbgnviz-instance-utilities-factory.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nmodule.exports = function () {\n  var instance;\n  function sbgnvizInstanceUtilities(options) {\n    instance = libs.sbgnviz(options);\n    return instance;\n  }\n  sbgnvizInstanceUtilities.getInstance = function () {\n    return instance;\n  };\n  sbgnvizInstanceUtilities.getCy = function () {\n    return this.getInstance().getCy();\n  };\n  return sbgnvizInstanceUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NiZ252aXotaW5zdGFuY2UtdXRpbGl0aWVzLWZhY3RvcnkuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHQyx3RkFBa0MsQ0FBQyxDQUFDO0FBRS9DRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxZQUFZO0VBRTNCLElBQUlDLFFBQVE7RUFFWixTQUFTQyx3QkFBd0JBLENBQUVDLE9BQU8sRUFBRTtJQUUxQ0YsUUFBUSxHQUFHTCxJQUFJLENBQUNRLE9BQU8sQ0FBQ0QsT0FBTyxDQUFDO0lBRWhDLE9BQU9GLFFBQVE7RUFDakI7RUFFQUMsd0JBQXdCLENBQUNHLFdBQVcsR0FBRyxZQUFZO0lBQ2pELE9BQU9KLFFBQVE7RUFDakIsQ0FBQztFQUVEQyx3QkFBd0IsQ0FBQ0ksS0FBSyxHQUFHLFlBQVk7SUFDM0MsT0FBTyxJQUFJLENBQUNELFdBQVcsQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDO0VBQ25DLENBQUM7RUFFRCxPQUFPSix3QkFBd0I7QUFDakMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoaXNlLy4vc3JjL3V0aWxpdGllcy9zYmdudml6LWluc3RhbmNlLXV0aWxpdGllcy1mYWN0b3J5LmpzPzMzYzgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGxpYnMgPSByZXF1aXJlKCcuL2xpYi11dGlsaXRpZXMnKS5nZXRMaWJzKCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgdmFyIGluc3RhbmNlO1xyXG5cclxuICBmdW5jdGlvbiBzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMgKG9wdGlvbnMpIHtcclxuXHJcbiAgICBpbnN0YW5jZSA9IGxpYnMuc2JnbnZpeihvcHRpb25zKTtcclxuXHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBzYmdudml6SW5zdGFuY2VVdGlsaXRpZXMuZ2V0Q3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLmdldEN5KCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2JnbnZpekluc3RhbmNlVXRpbGl0aWVzO1xyXG59O1xyXG4iXSwibmFtZXMiOlsibGlicyIsInJlcXVpcmUiLCJnZXRMaWJzIiwibW9kdWxlIiwiZXhwb3J0cyIsImluc3RhbmNlIiwic2JnbnZpekluc3RhbmNlVXRpbGl0aWVzIiwib3B0aW9ucyIsInNiZ252aXoiLCJnZXRJbnN0YW5jZSIsImdldEN5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnviz-instance-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/topology-grouping-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/topology-grouping-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var isEqual = __webpack_require__(/*! lodash.isequal */ \"./node_modules/lodash.isequal/index.js\");\nmodule.exports = function () {\n  var cy, elementUtilities;\n  var groupCompoundType, metaEdgeIdentifier, lockGraphTopology, shouldApply;\n  var DEFAULT_GROUP_COMPOUND_TYPE = 'topology group';\n  var EDGE_STYLE_NAMES = ['line-color', 'width'];\n  function topologyGrouping(param, props) {\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    elementUtilities = param.elementUtilities;\n    groupCompoundType = props.groupCompoundType || DEFAULT_GROUP_COMPOUND_TYPE;\n    metaEdgeIdentifier = props.metaEdgeIdentifier;\n    lockGraphTopology = props.lockGraphTopology;\n    shouldApply = props.shouldApply || true;\n    topologyGrouping.applied = false;\n    initMetaStyleMap();\n  }\n  topologyGrouping.apply = function () {\n    if (topologyGrouping.applied || !evalOpt(shouldApply)) {\n      return;\n    }\n    var list = cy.nodes().map(function (node) {\n      return [node];\n    });\n\n    // determine node groups by their topology\n    var groups = getNodeGroups(list);\n\n    // apply grouping in cy level\n    var metaEdges = topologyGrouping.getMetaEdges();\n    var compounds = topologyGrouping.getGroupCompounds();\n    applyGrouping(groups, metaEdges, compounds);\n    topologyGrouping.applied = true;\n    if (lockGraphTopology) {\n      elementUtilities.lockGraphTopology();\n    }\n    return groups;\n  };\n  topologyGrouping.unapply = function () {\n    if (!topologyGrouping.applied) {\n      return;\n    }\n    var metaEdges = topologyGrouping.getMetaEdges();\n    metaEdges.forEach(function (edge) {\n      var toRestore = edge.data('tg-to-restore');\n      edge.remove();\n      toRestore.restore();\n      EDGE_STYLE_NAMES.forEach(function (name) {\n        var oldVal = topologyGrouping.metaStyleMap[name][edge.id()];\n        var newVal = edge.data(name);\n        if (oldVal !== newVal) {\n          toRestore.data(name, newVal);\n        }\n      });\n    });\n    initMetaStyleMap();\n    var parents = topologyGrouping.getGroupCompounds();\n    elementUtilities.changeParent(parents.children(), null);\n    parents.remove();\n    topologyGrouping.applied = false;\n    if (lockGraphTopology) {\n      elementUtilities.unlockGraphTopology();\n    }\n  };\n  topologyGrouping.getMetaEdges = function () {\n    var metaEdges = cy.edges('[' + metaEdgeIdentifier + ']');\n    return metaEdges;\n  };\n  topologyGrouping.getGroupCompounds = function () {\n    var className = groupCompoundType;\n    return cy.nodes('[class=\"' + className + '\"]');\n  };\n  topologyGrouping.clearAppliedFlag = function () {\n    topologyGrouping.applied = false;\n  };\n  topologyGrouping.setAppliedFlag = function (applied) {\n    topologyGrouping.applied = applied;\n  };\n  topologyGrouping.toggleAppliedFlag = function () {\n    topologyGrouping.applied = !topologyGrouping.applied;\n  };\n  function initMetaStyleMap() {\n    topologyGrouping.metaStyleMap = {};\n    EDGE_STYLE_NAMES.forEach(function (name) {\n      topologyGrouping.metaStyleMap[name] = {};\n    });\n  }\n  function evalOpt(opt) {\n    if (typeof opt === 'function') {\n      return opt();\n    }\n    return opt;\n  }\n  function getNodeGroups(list) {\n    if (list.length <= 1) {\n      return list;\n    }\n    var halves = getHalves(list);\n    var firstPart = getNodeGroups(halves[0]);\n    var secondPart = getNodeGroups(halves[1]);\n    // merge the halves\n    var groups = mergeGroups(firstPart, secondPart);\n    return groups;\n  }\n  function getParentOrSelf(node) {\n    var parent = node.parent();\n    return parent.size() > 0 ? parent : node;\n  }\n  function calcGroupingKey(edge) {\n    var srcId = getParentOrSelf(edge.source()).id();\n    var tgtId = getParentOrSelf(edge.target()).id();\n    var edgeType = getEdgeType(edge);\n    return [edgeType, srcId, tgtId].join('-');\n  }\n  function addToMapChain(map, key, val) {\n    if (!map[key]) {\n      map[key] = cy.collection();\n    }\n    map[key] = map[key].add(val);\n  }\n  function applyGrouping(groups, metaEdges, groupCompounds) {\n    var compounds;\n    if (groupCompounds.length > 0) {\n      compounds = groupCompounds;\n    } else {\n      groups.forEach(function (group) {\n        createGroupCompound(group);\n      });\n      compounds = topologyGrouping.getGroupCompounds();\n    }\n    var childrenEdges = compounds.children().connectedEdges();\n    var edgesMap = [];\n    childrenEdges.forEach(function (edge) {\n      var key = calcGroupingKey(edge);\n      addToMapChain(edgesMap, key, edge);\n      edge.remove();\n    });\n    if (metaEdges.length > 0) {\n      Object.keys(edgesMap).forEach(function (key) {\n        var edges = edgesMap[key];\n        var temp = edges[0];\n        var metaEdge = metaEdges.filter(function (edge) {\n          return edge.source().id() === getParentOrSelf(temp.source()).id() && edge.target().id() === getParentOrSelf(temp.target()).id();\n        })[0];\n        metaEdge.data('tg-to-restore', edges);\n        edges.remove();\n      });\n    } else {\n      Object.keys(edgesMap).forEach(function (key) {\n        createMetaEdgeFor(edgesMap[key]);\n      });\n    }\n  }\n  function createGroupCompound(group) {\n    if (group.length < 2) {\n      return;\n    }\n    var collection = cy.collection();\n    group.forEach(function (node) {\n      collection = collection.add(node);\n    });\n    elementUtilities.createCompoundForGivenNodes(collection, groupCompoundType);\n  }\n  function createMetaEdgeFor(edges) {\n    var srcId = getParentOrSelf(edges.source()).id();\n    var tgtId = getParentOrSelf(edges.target()).id();\n    var type = edges.data('class');\n    cy.remove(edges);\n    var metaEdge = elementUtilities.addEdge(srcId, tgtId, type);\n    metaEdge.data('tg-to-restore', edges);\n    metaEdge.data(metaEdgeIdentifier, true);\n    EDGE_STYLE_NAMES.forEach(function (styleName) {\n      edges.forEach(function (edge) {\n        topologyGrouping.metaStyleMap[styleName][edge.id()] = edge.data(styleName);\n      });\n      var commonVal = elementUtilities.getCommonProperty(edges, styleName, 'data');\n      if (commonVal) {\n        metaEdge.data(styleName, commonVal);\n      }\n    });\n    return metaEdge;\n  }\n  function mergeGroups(groups1, groups2) {\n    // notMergedGrs will include members of groups1 that are not merged\n    // mergedGrs will include the merged members from 2 groups\n    var notMergedGrs = [],\n      mergedGrs = [];\n    groups1.forEach(function (gr1) {\n      var merged = false;\n      mergedGrs.concat(groups2).forEach(function (gr2, index2) {\n        // if groups should be merged merge them, remove gr2 from where it\n        // comes from and push the merge result to mergedGrs\n        if (shouldMerge(gr1, gr2)) {\n          var mergedGr = gr1.concat(gr2);\n          if (index2 >= mergedGrs.length) {\n            removeAt(groups2, index2 - mergedGrs.length);\n          } else {\n            removeAt(mergedGrs, index2);\n          }\n\n          // mark as merged and break the loop\n          mergedGrs.push(mergedGr);\n          merged = true;\n          return;\n        }\n      });\n\n      // if gr1 is not merged push it to notMergedGrs\n      if (!merged) {\n        notMergedGrs.push(gr1);\n      }\n    });\n\n    // the groups that comes from groups2 but not merged are still included\n    // in groups2 add them to the result together with mergedGrs and notMergedGrs\n    return notMergedGrs.concat(mergedGrs, groups2);\n  }\n  function shouldMerge(group1, group2) {\n    // using first elements is enough to decide whether to merge\n    var node1 = group1[0];\n    var node2 = group2[0];\n    if (node1.edges().length !== node2.edges().length) {\n      return false;\n    }\n    var getUndirectedEdges = function getUndirectedEdges(node) {\n      var edges = node.connectedEdges().filter(isUndirectedEdge);\n      return edges;\n    };\n    // undirected edges of node1 and node2 respectively\n    var undir1 = getUndirectedEdges(node1);\n    var undir2 = getUndirectedEdges(node2);\n    var in1 = node1.incomers().edges().not(undir1);\n    var in2 = node2.incomers().edges().not(undir2);\n    var out1 = node1.outgoers().edges().not(undir1);\n    var out2 = node2.outgoers().edges().not(undir2);\n    return compareEdgeGroup(in1, in2, node1, node2) && compareEdgeGroup(out1, out2, node1, node2) && compareEdgeGroup(undir1, undir2, node1, node2);\n  }\n\n  // decide if 2 edge groups contains set of edges with similar content (type,\n  // source,target) relative to their nodes where gr1 are edges of node1 and gr2 are edges of\n  // node2\n  function compareEdgeGroup(gr1, gr2, node1, node2) {\n    var id1 = node1.id();\n    var id2 = node2.id();\n    var map1 = fillIdToTypeSetMap(gr1, node1);\n    var map2 = fillIdToTypeSetMap(gr2, node2);\n    if (Object.keys(map1).length !== Object.keys(map2).length) {\n      return;\n    }\n    var failed = false;\n    Object.keys(map1).forEach(function (key) {\n      // if already failed just return\n      if (failed) {\n        return;\n      }\n\n      // if key is id2 use id1 instead because comparison is relative to nodes\n      var otherKey = key == id2 ? id1 : key;\n\n      // check if the sets have the same content\n      // if check fails return false\n      if (!isEqual(map1[key], map2[otherKey])) {\n        failed = true;\n      }\n    });\n\n    // if check passes for each key return true\n    return !failed;\n  }\n  function fillIdToTypeSetMap(edgeGroup, node) {\n    var map = {};\n    var nodeId = node.id();\n    edgeGroup.forEach(function (edge) {\n      var srcId = edge.data('source');\n      var tgtId = edge.data('target');\n      var edgeId = edge.id();\n      var otherEnd = nodeId === tgtId ? srcId : tgtId;\n      function addToRelatedSet(sideStr, value) {\n        if (!map[sideStr]) {\n          map[sideStr] = new Set();\n        }\n        map[sideStr].add(value);\n      }\n      var edgeType = getEdgeType(edge);\n      addToRelatedSet(otherEnd, edgeType);\n    });\n    return map;\n  }\n  function getEdgeType(edge) {\n    return edge.data('class');\n  }\n  function isUndirectedEdge(edge) {\n    return elementUtilities.isUndirectedEdge(edge);\n  }\n\n  // get halves of a list. It is assumed that list size is at least 2.\n  function getHalves(list) {\n    var s = list.length;\n    var halfIndex = Math.floor(s / 2);\n    var firstHalf = list.slice(0, halfIndex);\n    var secondHalf = list.slice(halfIndex, s);\n    return [firstHalf, secondHalf];\n  }\n  function removeAt(arr, index) {\n    arr.splice(index, 1);\n  }\n  return topologyGrouping;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/topology-grouping-factory.js\n");

/***/ }),

/***/ "./src/utilities/ur-action-functions-extender-factory.js":
/*!***************************************************************!*\
  !*** ./src/utilities/ur-action-functions-extender-factory.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Extends sbgnviz.undoRedoActionFunctions\nvar libs = (__webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs)();\nmodule.exports = function () {\n  var sbgnvizInstance, undoRedoActionFunctions, elementUtilities, cy, topologyGrouping;\n  function undoRedoActionFunctionsExtender(param) {\n    sbgnvizInstance = param.sbgnvizInstanceUtilities.getInstance();\n    cy = param.sbgnvizInstanceUtilities.getCy();\n    undoRedoActionFunctions = sbgnvizInstance.undoRedoActionFunctions;\n    elementUtilities = param.elementUtilities;\n    topologyGrouping = param.sifTopologyGrouping;\n    extend();\n  }\n\n  // Extends undoRedoActionFunctions with chise specific features\n  function extend() {\n    undoRedoActionFunctions.applySIFTopologyGrouping = function (param) {\n      var oldEles, newEles;\n      if (param.firstTime) {\n        oldEles = cy.elements();\n        if (param.apply) {\n          topologyGrouping.apply();\n        } else {\n          topologyGrouping.unapply();\n        }\n        newEles = cy.elements();\n      } else {\n        oldEles = param.oldEles;\n        newEles = param.newEles;\n        if (elementUtilities.isGraphTopologyLocked()) {\n          elementUtilities.unlockGraphTopology();\n        } else {\n          elementUtilities.lockGraphTopology();\n        }\n        oldEles.remove();\n        newEles.restore();\n        topologyGrouping.toggleAppliedFlag();\n      }\n      var result = {\n        oldEles: newEles,\n        newEles: oldEles\n      };\n      return result;\n    };\n\n    // Section Start\n    // add/remove action functions\n\n    undoRedoActionFunctions.addNode = function (param) {\n      var result;\n      if (param.firstTime) {\n        var newNode = param.newNode;\n        result = elementUtilities.addNode(newNode.x, newNode.y, newNode[\"class\"], newNode.id, newNode.parent, newNode.visibility);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n      return {\n        eles: result\n      };\n    };\n    undoRedoActionFunctions.addEdge = function (param) {\n      var result;\n      if (param.firstTime) {\n        var newEdge = param.newEdge;\n        result = elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge[\"class\"], newEdge.id, newEdge.visibility);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n      return {\n        eles: result\n      };\n    };\n    undoRedoActionFunctions.addProcessWithConvenientEdges = function (param) {\n      var result;\n      if (param.firstTime) {\n        result = elementUtilities.addProcessWithConvenientEdges(param.source, param.target, param.processType);\n      } else {\n        result = elementUtilities.restoreEles(param);\n      }\n      return {\n        eles: result\n      };\n    };\n    undoRedoActionFunctions.createCompoundForGivenNodes = function (param) {\n      var result = {};\n      if (param.firstTime) {\n        // Nodes to make compound, their descendants and edges connected to them will be removed during createCompoundForGivenNodes operation\n        // (internally by eles.move() operation), so mark them as removed eles for undo operation.\n        var nodesToMakeCompound = param.nodesToMakeCompound;\n        var removedEles = nodesToMakeCompound.union(nodesToMakeCompound.descendants());\n        removedEles = removedEles.union(removedEles.connectedEdges());\n        result.removedEles = removedEles;\n        // Assume that all nodes to make compound have the same parent\n        var oldParentId = nodesToMakeCompound[0].data(\"parent\");\n        // The parent of new compound will be the old parent of the nodes to make compound\n        // New eles includes new compound and the moved eles and will be used in undo operation.\n        result.newEles = elementUtilities.createCompoundForGivenNodes(nodesToMakeCompound, param.compoundType);\n      } else {\n        result.removedEles = param.newEles.remove();\n        result.newEles = param.removedEles.restore();\n        elementUtilities.maintainPointer(result.newEles);\n      }\n      return result;\n    };\n\n    // Section End\n    // add/remove action functions\n\n    // Section Start\n    // easy creation action functions\n\n    undoRedoActionFunctions.createTemplateReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTemplateReaction(param.templateType, param.macromoleculeList, param.complexName, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength, param.layoutParam);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createActivationReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createActivationReaction(param.proteinName, param.processPosition, param.edgeLength, param.reverse);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranslation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranslation(param.regulatorLabel, param.outputLabel, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranscription = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranscription(param.label, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createDegradation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createDegradation(param.macromolecule, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createComplexProteinFormation = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createComplexProteinFormation(param.proteinLabels, param.complexLabel, param.regulator, param.orientation, param.reverse);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createMultimerization = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createMultimerization(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createConversion = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createConversion(param.macromolecule, param.regulator, param.regulatorMultimer, param.orientation, param.inputInfoboxLabels, param.outputInfoboxLabels);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createMetabolicReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createMetabolicReaction(param.inputs, param.outputs, param.reversible, param.regulator, param.regulatorMultimer, param.orientation);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createMetabolicCatalyticActivity = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createMetabolicCatalyticActivity(param.inputNodeList, param.outputNodeList, param.catalystName, param.catalystType, param.processPosition, param.tilingPaddingVertical, param.tilingPaddingHorizontal, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranscriptionReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranscriptionReaction(param.geneName, param.mRnaName, param.processPosition, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n    undoRedoActionFunctions.createTranslationReaction = function (param) {\n      var firstTime = param.firstTime;\n      var eles;\n      if (firstTime) {\n        eles = elementUtilities.createTranslationReaction(param.mRnaName, param.proteinName, param.processPosition, param.edgeLength);\n      } else {\n        eles = param;\n        cy.add(eles);\n        cy.elements().unselect();\n        eles.select();\n      }\n      return {\n        eles: eles\n      };\n    };\n\n    // Section End\n    // easy creation action functions\n\n    // Section Start\n    // general action functions\n\n    undoRedoActionFunctions.getNodePositions = function () {\n      var positions = {};\n      var nodes = cy.nodes();\n      nodes.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        positions[ele.id()] = {\n          x: ele.position(\"x\"),\n          y: ele.position(\"y\")\n        };\n      });\n      return positions;\n    };\n    undoRedoActionFunctions.returnToPositions = function (positions) {\n      var currentPositions = {};\n      cy.nodes().positions(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n        currentPositions[ele.id()] = {\n          x: ele.position(\"x\"),\n          y: ele.position(\"y\")\n        };\n        var pos = positions[ele.id()];\n        return {\n          x: pos.x,\n          y: pos.y\n        };\n      });\n      return currentPositions;\n    };\n    undoRedoActionFunctions.resizeNodes = function (param) {\n      var result = {\n        performOperation: true\n      };\n      var nodes = param.nodes;\n      result.sizeMap = {};\n      result.useAspectRatio = false;\n      result.preserveRelativePos = param.preserveRelativePos;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (node.isParent()) {\n          result.sizeMap[node.id()] = {\n            w: node.data(\"minWidth\") || 0,\n            h: node.data(\"minHeight\") || 0,\n            biasL: node.data(\"minWidthBiasLeft\") || 0,\n            biasR: node.data(\"minWidthBiasRight\") || 0,\n            biasT: node.data(\"minHeightBiasTop\") || 0,\n            biasB: node.data(\"minHeightBiasBottom\") || 0\n            // w: node.css(\"minWidth\") != 0?  node.data(\"minWidth\") : node.children().boundingBox().w,\n            //h: node.css(\"min-height\") != 0?  node.data(\"minHeight\") : node.children().boundingBox().h\n          };\n        } else {\n          result.sizeMap[node.id()] = {\n            w: node.width(),\n            h: node.height()\n          };\n        }\n      }\n      result.nodes = nodes;\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (param.performOperation) {\n          if (param.sizeMap) {\n            /* if (param.preserveRelativePos === true) {\r\n              var oldWidth = node.data(\"bbox\").w;\r\n              var oldHeight = node.data(\"bbox\").h;\r\n            } */\n\n            if (node.isParent()) {\n              node.data(\"minHeight\", param.sizeMap[node.id()].h);\n              node.data(\"minWidth\", param.sizeMap[node.id()].w);\n              node.data(\"minWidthBiasLeft\", param.sizeMap[node.id()].biasL);\n              node.data(\"minWidthBiasRight\", param.sizeMap[node.id()].biasR);\n              node.data(\"minHeightBiasTop\", param.sizeMap[node.id()].biasT);\n              node.data(\"minHeightBiasBottom\", param.sizeMap[node.id()].biasB);\n            } else {\n              node.data(\"bbox\").w = param.sizeMap[node.id()].w;\n              node.data(\"bbox\").h = param.sizeMap[node.id()].h;\n            }\n\n            /* if (param.preserveRelativePos === true) {\r\n              var statesandinfos = node.data('statesandinfos');\r\n              var topBottom = statesandinfos.filter(box => (box.anchorSide === \"top\" || box.anchorSide === \"bottom\"));\r\n              var rightLeft = statesandinfos.filter(box => (box.anchorSide === \"right\" || box.anchorSide === \"left\"));\r\n                topBottom.forEach(function(box){\r\n                if (box.bbox.x < 0) {\r\n                  box.bbox.x = 0;\r\n                }\r\n                else if (box.bbox.x > oldWidth) {\r\n                  box.bbox.x = oldWidth;\r\n                }\r\n                box.bbox.x = node.data(\"bbox\").w * box.bbox.x / oldWidth;\r\n              });\r\n                rightLeft.forEach(function(box){\r\n                if (box.bbox.y < 0) {\r\n                  box.bbox.y = 0;\r\n                }\r\n                else if (box.bbox.y > oldHeight) {\r\n                  box.bbox.y = oldHeight;\r\n                }\r\n                box.bbox.y = node.data(\"bbox\").h * box.bbox.y / oldHeight;\r\n              });\r\n            } */\n          } else {\n            elementUtilities.resizeNodes(param.nodes, param.width, param.height, param.useAspectRatio, param.preserveRelativePos);\n          }\n        }\n      }\n      cy.style().update();\n      return result;\n    };\n    undoRedoActionFunctions.changeNodeLabel = function (param) {\n      var result = {};\n      var nodes = param.nodes;\n      result.nodes = nodes;\n      result.label = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        result.label[node.id()] = node._private.data.label;\n      }\n      if (param.firstTime) {\n        nodes.data('label', param.label);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          node._private.data.label = param.label[node.id()];\n        }\n      }\n      return result;\n    };\n    undoRedoActionFunctions.updateInfoboxStyle = function (param) {\n      var result = {};\n      var style = param.node.data('statesandinfos')[param.index].style;\n      result.newProps = $.extend({}, style);\n      result.node = param.node;\n      result.index = param.index;\n      elementUtilities.updateInfoboxStyle(param.node, param.index, param.newProps);\n      return result;\n    };\n    undoRedoActionFunctions.updateInfoboxObj = function (param) {\n      var result = {};\n      var obj = param.node.data('statesandinfos')[param.index];\n      result.newProps = $.extend({}, obj);\n      result.node = param.node;\n      result.index = param.index;\n      elementUtilities.updateInfoboxObj(param.node, param.index, param.newProps);\n      return result;\n    };\n    undoRedoActionFunctions.regenerateId = function (param) {\n      var nodes = param.nodes;\n      var result = {};\n      result.nodes = nodes;\n      result.id = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        result.id[node.id()] = node._private.data.id;\n        node._private.data.id = param.value;\n      }\n      return result;\n    };\n    undoRedoActionFunctions.changeData = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.name = param.name;\n      result.valueMap = {};\n      result.eles = eles;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.valueMap[ele.id()] = ele.data(param.name);\n      }\n      elementUtilities.changeData(param.eles, param.name, param.valueMap);\n      return result;\n    };\n    undoRedoActionFunctions.updateSetField = function (param) {\n      var updates = elementUtilities.updateSetField(param.ele, param.fieldName, param.toDelete, param.toAdd, param.callback);\n      var result = {\n        ele: param.ele,\n        fieldName: param.fieldName,\n        callback: param.callback,\n        toDelete: updates.added,\n        toAdd: updates.deleted\n      };\n      return result;\n    };\n    undoRedoActionFunctions.changeCss = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.name = param.name;\n      result.valueMap = {};\n      result.eles = eles;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.valueMap[ele.id()] = ele.css(param.name);\n      }\n      elementUtilities.changeCss(param.eles, param.name, param.valueMap);\n      return result;\n    };\n    undoRedoActionFunctions.changeFontProperties = function (param) {\n      var result = {};\n      var eles = param.eles;\n      result.data = {};\n      result.eles = eles;\n      for (var i = 0; i < eles.length; i++) {\n        var ele = eles[i];\n        result.data[ele.id()] = {};\n        var data = param.firstTime ? param.data : param.data[ele.id()];\n        for (var prop in data) {\n          result.data[ele.id()][prop] = ele.data(prop);\n        }\n      }\n      if (param.firstTime) {\n        elementUtilities.changeFontProperties(eles, data);\n      } else {\n        for (var i = 0; i < eles.length; i++) {\n          var ele = eles[i];\n          elementUtilities.changeFontProperties(ele, data);\n        }\n      }\n      return result;\n    };\n\n    /*\r\n     * Show eles and perform layout.\r\n     */\n    undoRedoActionFunctions.showAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      if (param.firstTime) {\n        result.eles = elementUtilities.showAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = cy.viewUtilities().show(eles); // Show given eles\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n      return result;\n    };\n    undoRedoActionFunctions.undoShowAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = cy.viewUtilities().hide(eles); // Hide previously unhidden eles;\n\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n\n    /*\r\n     * Hide eles and perform layout.\r\n     */\n    undoRedoActionFunctions.hideAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      if (param.firstTime) {\n        result.eles = elementUtilities.hideAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = cy.viewUtilities().hide(eles); // Hide given eles\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n      return result;\n    };\n    undoRedoActionFunctions.undoHideAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = cy.viewUtilities().show(eles); // Show previously hidden eles\n\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n\n    /*\r\n     * Delete eles and perform layout.\r\n     */\n    undoRedoActionFunctions.deleteAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      if (param.firstTime) {\n        result.eles = elementUtilities.deleteAndPerformLayout(param.eles, param.layoutparam);\n      } else {\n        result.eles = eles.remove();\n        undoRedoActionFunctions.returnToPositions(param.positions);\n      }\n      return result;\n    };\n    undoRedoActionFunctions.undoDeleteAndPerformLayout = function (param) {\n      var eles = param.eles;\n      var result = {};\n      result.positions = undoRedoActionFunctions.getNodePositions();\n      result.eles = elementUtilities.restoreEles(eles);\n      undoRedoActionFunctions.returnToPositions(param.positions);\n      return result;\n    };\n\n    // Section End\n    // general action functions\n\n    // Section Start\n    // sbgn action functions\n\n    undoRedoActionFunctions.changeStateOrInfoBox = function (param) {\n      var result = {};\n      result.type = param.type;\n      result.nodes = param.nodes;\n      result.index = param.index;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(param.nodes);\n      result.value = elementUtilities.changeStateOrInfoBox(param.nodes, param.index, param.value, param.type);\n      /* var locations = elementUtilities.checkFit(param.nodes);\r\n      if (locations !== undefined && locations.length > 0) {\r\n        elementUtilities.fitUnits(param.nodes, locations);\r\n      } */\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(param.nodes, data);\n      }\n      cy.forceRender();\n      result.data = tempData;\n      return result;\n    };\n    undoRedoActionFunctions.addStateOrInfoBox = function (param) {\n      var obj = param.obj;\n      var nodes = param.nodes;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(nodes);\n      var locationObj = elementUtilities.addStateOrInfoBox(nodes, obj);\n      /*  var locations = elementUtilities.checkFit(nodes);\r\n       if (locations !== undefined && locations.length > 0) {\r\n         elementUtilities.fitUnits(nodes, locations);\r\n       } */\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(nodes, data);\n      }\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        locationObj: locationObj,\n        obj: obj,\n        data: tempData\n      };\n      return result;\n    };\n    undoRedoActionFunctions.removeStateOrInfoBox = function (param) {\n      var locationObj = param.locationObj;\n      var nodes = param.nodes;\n      var data = param.data;\n      var tempData = elementUtilities.saveUnits(nodes);\n      var obj = elementUtilities.removeStateOrInfoBox(nodes, locationObj);\n      if (data !== undefined) {\n        elementUtilities.restoreUnits(nodes, data);\n      }\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        obj: obj,\n        data: tempData\n      };\n      return result;\n    };\n    undoRedoActionFunctions.fitUnits = function (param) {\n      var node = param.node;\n      var locations = param.locations;\n      var obj = elementUtilities.fitUnits(node, locations);\n      cy.forceRender();\n      var result = {\n        node: node,\n        obj: obj,\n        locations: locations\n      };\n      return result;\n    };\n    undoRedoActionFunctions.restoreUnits = function (param) {\n      var node = param.node;\n      var locations = param.locations;\n      var obj = param.obj;\n      var index = 0;\n      node.data('statesandinfos').forEach(function (ele) {\n        var box = obj[index++];\n        ele.bbox.x = box.x;\n        ele.bbox.y = box.y;\n        var oldSide = ele.anchorSide;\n        ele.anchorSide = box.anchorSide;\n        elementUtilities.modifyUnits(node, ele, oldSide);\n      });\n      cy.forceRender();\n      var result = {\n        node: node,\n        locations: locations\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setMultimerStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isMultimer = node.data('class').endsWith(' multimer');\n        resultStatus[node.id()] = isMultimer;\n      }\n\n      // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n      if (firstTime) {\n        elementUtilities.setMultimerStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setMultimerStatus(node, status[node.id()]);\n        }\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setActiveStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isActive = node.data('class').startsWith('active ');\n        resultStatus[node.id()] = isActive;\n      }\n\n      // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n      if (firstTime) {\n        elementUtilities.setActiveStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setActiveStatus(node, status[node.id()]);\n        }\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setHypotheticalStatus = function (param) {\n      var firstTime = param.firstTime;\n      var nodes = param.nodes;\n      var status = param.status;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var isHypothetical = node.data('class').includes('hypothetical');\n        resultStatus[node.id()] = isHypothetical;\n      }\n\n      // If this is the first time change the status of all nodes at once.\n      // If not change status of each seperately to the values mapped to their id.\n      if (firstTime) {\n        elementUtilities.setHypotheticalStatus(nodes, status);\n      } else {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes[i];\n          elementUtilities.setHypotheticalStatus(node, status[node.id()]);\n          //elementUtilities.setHypothteticalStatus\n        }\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-multimer').attr(\"checked\", !$('#inspector-is-multimer').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n    undoRedoActionFunctions.setCloneMarkerStatus = function (param) {\n      var nodes = param.nodes;\n      var status = param.status;\n      var firstTime = param.firstTime;\n      var resultStatus = {};\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        resultStatus[node.id()] = node.data('clonemarker');\n        var currentStatus = firstTime ? status : status[node.id()];\n        elementUtilities.setCloneMarkerStatus(node, currentStatus);\n      }\n\n      //  if (!firstTime && _.isEqual(nodes, cy.nodes(':selected'))) {\n      //    $('#inspector-is-clone-marker').attr(\"checked\", !$('#inspector-is-clone-marker').attr(\"checked\"));\n      //  }\n\n      var result = {\n        status: resultStatus,\n        nodes: nodes\n      };\n      return result;\n    };\n\n    // param: {class: sbgnclass, name: propertyName, value: value}\n    undoRedoActionFunctions.setDefaultProperty = function (param) {\n      var sbgnclass = param[\"class\"];\n      var name = param.name;\n      var value = param.value;\n      var classDefaults = elementUtilities.getDefaultProperties(sbgnclass);\n      var result = {\n        \"class\": sbgnclass,\n        name: name,\n        value: classDefaults.hasOwnProperty(name) ? classDefaults[name] : undefined\n      };\n      var propMap = {};\n      propMap[name] = value;\n      elementUtilities.setDefaultProperties(sbgnclass, propMap);\n      return result;\n    };\n    undoRedoActionFunctions.addBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      var updateInfo = param.updateInfo;\n      var promptInvalidImage = param.promptInvalidImage;\n      var validateURL = param.validateURL;\n      elementUtilities.addBackgroundImage(nodes, bgObj, updateInfo, promptInvalidImage, validateURL);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: bgObj,\n        updateInfo: updateInfo,\n        promptInvalidImage: promptInvalidImage,\n        validateURL: validateURL\n      };\n      return result;\n    };\n    undoRedoActionFunctions.removeBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      elementUtilities.removeBackgroundImage(nodes, bgObj);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: bgObj\n      };\n      return result;\n    };\n    undoRedoActionFunctions.updateBackgroundImage = function (param) {\n      var bgObj = param.bgObj;\n      var nodes = param.nodes;\n      var oldBgObj = elementUtilities.updateBackgroundImage(nodes, bgObj);\n      cy.forceRender();\n      var result = {\n        nodes: nodes,\n        bgObj: oldBgObj\n      };\n      return result;\n    };\n    undoRedoActionFunctions.changeBackgroundImage = function (param) {\n      var oldImg = param.oldImg;\n      var newImg = param.newImg;\n      var nodes = param.nodes;\n      var firstTime = param.firstTime;\n      var updateInfo = param.updateInfo;\n      var promptInvalidImage = param.promptInvalidImage;\n      var validateURL = param.validateURL;\n      var result = elementUtilities.changeBackgroundImage(nodes, oldImg, newImg, firstTime, updateInfo, promptInvalidImage, validateURL);\n      cy.forceRender();\n      return result;\n    };\n\n    // Section End\n    // sbgn action functions\n    undoRedoActionFunctions.convertIntoReversibleReaction = function (param) {\n      var collection = cy.collection();\n      var mapType = elementUtilities.getMapType();\n      elementUtilities.setMapType(param.mapType);\n      $('#map-type').val(param.mapType);\n      param.collection.forEach(function (edge) {\n        var sourceNode = edge._private.data.source;\n        var targetNode = edge._private.data.target;\n        edge.move({\n          source: targetNode,\n          target: sourceNode\n        });\n        var convertedEdge = cy.getElementById(edge.id());\n        if (convertedEdge.data(\"cyedgebendeditingDistances\")) {\n          var distance = convertedEdge.data(\"cyedgebendeditingDistances\");\n          distance = distance.map(function (element) {\n            return -1 * element;\n          });\n          convertedEdge.data(\"cyedgebendeditingDistances\", distance.reverse());\n          var weight = convertedEdge.data(\"cyedgebendeditingWeights\");\n          weight = weight.map(function (element) {\n            return 1 - element;\n          });\n          convertedEdge.data(\"cyedgebendeditingWeights\", weight.reverse());\n        }\n        if (convertedEdge.data(\"cyedgecontroleditingDistances\")) {\n          var _distance = convertedEdge.data(\"cyedgecontroleditingDistances\");\n          _distance = _distance.map(function (element) {\n            return -1 * element;\n          });\n          convertedEdge.data(\"cyedgecontroleditingDistances\", _distance.reverse());\n          var _weight = convertedEdge.data(\"cyedgecontroleditingWeigths\");\n          _weight = _weight.map(function (element) {\n            return 1 - element;\n          });\n          convertedEdge.data(\"cyedgecontroleditingWeigths\", _weight.reverse());\n        }\n        if (convertedEdge._private.data[\"class\"] === \"consumption\") {\n          convertedEdge._private.data[\"class\"] = \"production\";\n          convertedEdge._private.data.portsource = targetNode + \".1\";\n          convertedEdge._private.data.porttarget = sourceNode;\n        } else if (convertedEdge._private.data[\"class\"] === \"production\") {\n          convertedEdge._private.data[\"class\"] = \"consumption\";\n          convertedEdge._private.data.portsource = targetNode;\n          convertedEdge._private.data.porttarget = sourceNode + \".1\";\n        }\n        collection = collection.add(convertedEdge);\n        cy.style().update();\n      });\n      var result = {\n        collection: collection,\n        mapType: mapType,\n        processId: param.processId\n      };\n      return result;\n    };\n    undoRedoActionFunctions.moveEdge = function (param) {\n      var result = {};\n      var edge = param.edge;\n      result.name = param.name;\n      result.source = edge.source().id();\n      result.target = edge.target().id();\n      result.portsource = edge.data(\"portsource\");\n      result.porttarget = edge.data(\"porttarget\");\n      elementUtilities.changeData(edge, 'source', param.source);\n      elementUtilities.changeData(edge, 'target', param.target);\n      elementUtilities.changeData(edge, 'portsource', param.portsource);\n      elementUtilities.changeData(edge, 'porttarget', param.porttarget);\n      edge = edge.move({\n        target: param.target,\n        source: param.source\n      });\n      result.edge = edge;\n      return result;\n    };\n    undoRedoActionFunctions.fixError = function (param) {\n      var errorCode = param.errorCode;\n      var result = {};\n      result.errorCode = errorCode;\n      if (errorCode == \"pd10101\" || errorCode == 'pd10102') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10103\" || errorCode == 'pd10107') {\n        param.newNodes.forEach(function (newNode) {\n          elementUtilities.addNode(newNode.x, newNode.y, newNode[\"class\"], newNode.id, undefined);\n        });\n        param.newEdges.forEach(function (newEdge) {\n          elementUtilities.addEdge(newEdge.source, newEdge.target, newEdge[\"class\"]);\n        });\n        param.oldEdges.forEach(function (oldEdge) {\n          cy.elements().unselect();\n          //return \n          oldEdge.remove();\n        });\n        param.node.remove();\n        return param;\n      } else if (errorCode == \"pd10105\" || errorCode == 'pd10106') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10140\") {\n        param.node.remove();\n        return param;\n      } else if (errorCode == \"pd10104\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10108\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10111\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10126\") {\n        param.edges.forEach(function (edge) {\n          edge.remove();\n        });\n        param.nodes.forEach(function (node) {\n          node.remove();\n        });\n        return param;\n      } else if (errorCode == \"pd10109\" || errorCode == \"pd10124\") {\n        result.newSource = param.edge.data().source;\n        result.newTarget = param.edge.data().target;\n        result.portsource = param.edge.data().portsource;\n        var clonedEdge = param.edge.clone();\n        var edgeParams = {\n          \"class\": clonedEdge.data()[\"class\"],\n          language: clonedEdge.data().language\n        };\n        clonedEdge.data().source = param.newSource;\n        clonedEdge.data().target = param.newTarget;\n        cy.remove(param.edge);\n        result.edge = elementUtilities.addEdge(param.newSource, param.newTarget, edgeParams, clonedEdge.data().id);\n        return result;\n      } else if (errorCode == \"pd10112\") {\n        param.callback = elementUtilities.maintainPointer;\n        // If this is first time we should move the node to its new parent and relocate it by given posDiff params\n        // else we should remove the moved eles and restore the eles to restore\n        if (param.firstTime) {\n          var newParentId = param.parentData == undefined ? null : param.parentData;\n          // These eles includes the nodes and their connected edges and will be removed in nodes.move().\n          // They should be restored in undo\n          var withDescendant = param.nodes.union(param.nodes.descendants());\n          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges());\n          // These are the eles created by nodes.move(), they should be removed in undo.\n          result.movedEles = param.nodes.move({\n            \"parent\": newParentId\n          });\n          var posDiff = {\n            x: param.posDiffX,\n            y: param.posDiffY\n          };\n          elementUtilities.moveNodes(posDiff, result.movedEles);\n        } else {\n          result.elesToRestore = param.movedEles.remove();\n          result.movedEles = param.elesToRestore.restore();\n        }\n        if (param.callback) {\n          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo\n          param.callback(result.movedEles); // apply the callback on newly created elements\n        }\n        return result;\n      } else if (errorCode == \"pd10125\") {\n        result.edge = param.edge.remove();\n        result.newEdge = {};\n        var edgeclass = param.newEdge.edgeParams[\"class\"] ? param.newEdge.edgeParams[\"class\"] : param.newEdge.edgeParams;\n        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));\n        if (validation === 'reverse') {\n          var temp = param.newEdge.source;\n          param.newEdge.source = param.newEdge.target;\n          param.newEdge.target = temp;\n        }\n        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();\n        result.newEdge.source = param.newEdge.source;\n        result.newEdge.target = param.newEdge.target;\n        result.newEdge.edgeParams = param.newEdge.edgeParams;\n        return result;\n      } else if (errorCode == \"pd10142\") {\n        result.edge = param.edge.remove();\n        result.newEdge = {};\n        var edgeclass = param.newEdge.edgeParams[\"class\"] ? param.newEdge.edgeParams[\"class\"] : param.newEdge.edgeParams;\n        var validation = elementUtilities.validateArrowEnds(edgeclass, cy.getElementById(param.newEdge.source), cy.getElementById(param.newEdge.target));\n        if (validation === 'reverse') {\n          var temp = param.newEdge.source;\n          param.newEdge.source = param.newEdge.target;\n          param.newEdge.target = temp;\n        }\n        result.newEdge.id = elementUtilities.addEdge(param.newEdge.source, param.newEdge.target, param.newEdge.edgeParams).id();\n        result.newEdge.source = param.newEdge.source;\n        result.newEdge.target = param.newEdge.target;\n        result.newEdge.edgeParams = param.newEdge.edgeParams;\n        return result;\n      } else {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.porttarget = param.edge.data(\"porttarget\");\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);\n        return result;\n      }\n    };\n    undoRedoActionFunctions.unfixError = function (param) {\n      var errorCode = param.errorCode;\n      var result = {};\n      result.errorCode = errorCode;\n      if (errorCode == \"pd10101\" || errorCode == 'pd10102') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10103\" || errorCode == 'pd10107') {\n        param.newNodes.forEach(function (newNode) {\n          cy.remove(cy.$('#' + newNode.id));\n        });\n        param.node.restore();\n        param.oldEdges.forEach(function (oldEdge) {\n          oldEdge.restore();\n        });\n        cy.animate({\n          duration: 100,\n          easing: 'ease',\n          fit: {\n            eles: {},\n            padding: 20\n          },\n          complete: function complete() {}\n        });\n        return param;\n      } else if (errorCode == \"pd10105\" || errorCode == 'pd10106') {\n        result.edge = elementUtilities.reverseEdge(param.edge);\n        return result;\n      } else if (errorCode == \"pd10140\") {\n        param.node.restore();\n        cy.animate({\n          duration: 100,\n          easing: 'ease',\n          fit: {\n            eles: {},\n            padding: 20\n          },\n          complete: function complete() {}\n        });\n        return param;\n      } else if (errorCode == \"pd10104\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10108\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10111\") {\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10126\") {\n        param.nodes.forEach(function (node) {\n          node.restore();\n        });\n        param.edges.forEach(function (edge) {\n          edge.restore();\n        });\n        return param;\n      } else if (errorCode == \"pd10109\" || errorCode == \"pd10124\") {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.portsource = param.portsource;\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'portsource', param.portsource);\n        return result;\n      } else if (errorCode == \"pd10112\") {\n        // If this is first time we should move the node to its new parent and relocate it by given posDiff params\n        // else we should remove the moved eles and restore the eles to restore\n        if (param.firstTime) {\n          var newParentId = param.parentData == undefined ? null : param.parentData;\n          // These eles includes the nodes and their connected edges and will be removed in nodes.move().\n          // They should be restored in undo\n          var withDescendant = param.nodes.union(param.nodes.descendants());\n          result.elesToRestore = withDescendant.union(withDescendant.connectedEdges());\n          // These are the eles created by nodes.move(), they should be removed in undo.\n          result.movedEles = param.nodes.move({\n            \"parent\": newParentId\n          });\n          var posDiff = {\n            x: param.posDiffX,\n            y: param.posDiffY\n          };\n          elementUtilities.moveNodes(posDiff, result.movedEles);\n        } else {\n          result.elesToRestore = param.movedEles.remove();\n          result.movedEles = param.elesToRestore.restore();\n        }\n        if (param.callback) {\n          result.callback = param.callback; // keep the provided callback so it can be reused after undo/redo\n          param.callback(result.movedEles); // apply the callback on newly created elements\n        }\n        return result;\n      } else if (errorCode == \"pd10125\") {\n        cy.$('#' + param.newEdge.id).remove();\n        param.edge = param.edge.restore();\n        return param;\n      } else if (errorCode == \"pd10142\") {\n        cy.$('#' + param.newEdge.id).remove();\n        param.edge = param.edge.restore();\n        return param;\n      } else {\n        result.newSource = param.edge.source().id();\n        result.newTarget = param.edge.target().id();\n        result.porttarget = param.edge.data(\"porttarget\");\n        result.edge = param.edge.move({\n          target: param.newTarget,\n          source: param.newSource\n        });\n        elementUtilities.changeData(result.edge, 'porttarget', param.porttarget);\n        return result;\n      }\n    };\n    undoRedoActionFunctions.cloneHighDegreeNode = function (node) {\n      var result = {};\n      var oldX = node.position().x;\n      var oldY = node.position().y;\n      var claculateNewClonePosition = function claculateNewClonePosition(sourceEndPointX, sourceEndPointY, targetEndPointX, targetEndPointY, desiredDistance, direction) {\n        var distance = Math.sqrt(Math.pow(targetEndPointY - sourceEndPointY, 2) + Math.pow(targetEndPointX - sourceEndPointX, 2));\n        var ratio = desiredDistance / distance;\n        var result = {};\n        if (direction == \"source\") {\n          result.cx = (1 - ratio) * sourceEndPointX + ratio * targetEndPointX;\n          result.cy = (1 - ratio) * sourceEndPointY + ratio * targetEndPointY;\n        } else {\n          result.cx = (1 - ratio) * targetEndPointX + ratio * sourceEndPointX;\n          result.cy = (1 - ratio) * targetEndPointY + ratio * sourceEndPointY;\n        }\n        return result;\n      };\n      var edges = node.connectedEdges();\n      var desiredDistance = (node.height() > node.width() ? node.height() : node.width()) * 0.1;\n      for (var i = 1; i < edges.length; i++) {\n        var edge = edges[i];\n        var index = i;\n        var edgeClone = edge.clone();\n        var startPosition = edge.source().id() == node.id() ? \"source\" : \"target\";\n        var newPosition = claculateNewClonePosition(edge.sourceEndpoint().x, edge.sourceEndpoint().y, edge.targetEndpoint().x, edge.targetEndpoint().y, desiredDistance, startPosition);\n        var newNodeId = node.id() + 'clone-' + index;\n        //edgeClone.data().id = edgeClone.data().id+ \"-\"+newNodeId;\n        if (edge.source().id() == node.id()) {\n          edgeClone.data().source = newNodeId;\n          edgeClone.data().portsource = newNodeId;\n        } else {\n          edgeClone.data().target = newNodeId;\n          edgeClone.data().porttarget = newNodeId;\n        }\n        var newNode = node.clone();\n        newNode.data().id = newNodeId;\n        cy.add(newNode);\n        edge.remove();\n        cy.add(edgeClone);\n        newNode.position({\n          x: newPosition.cx,\n          y: newPosition.cy\n        });\n        elementUtilities.setCloneMarkerStatus(newNode, true);\n      }\n      var newPosition = claculateNewClonePosition(edges[0].sourceEndpoint().x, edges[0].sourceEndpoint().y, edges[0].targetEndpoint().x, edges[0].targetEndpoint().y, desiredDistance, edges[0].source().id() == node.id() ? \"source\" : \"target\");\n      var cloneEdge = edges[0].clone();\n      //cloneEdge.data().id = cloneEdge.data().id+ \"-\"+node.id()+'clone-0';\n\n      edges[0].remove();\n      cy.add(cloneEdge);\n      elementUtilities.setCloneMarkerStatus(node, true);\n      node.position({\n        x: newPosition.cx,\n        y: newPosition.cy\n      });\n      result.oldX = oldX;\n      result.oldY = oldY;\n      result.node = node;\n      result.numberOfEdges = edges.length;\n      return result;\n    };\n    undoRedoActionFunctions.unCloneHighDegreeNode = function (param) {\n      var node = param.node;\n      elementUtilities.setCloneMarkerStatus(node, false);\n      node.position({\n        x: param.oldX,\n        y: param.oldY\n      });\n      for (var i = 1; i < param.numberOfEdges; i++) {\n        var cloneId = node.id() + 'clone-' + i;\n        var clone = cy.$(\"#\" + cloneId);\n        var cloneEdge = clone.connectedEdges()[0];\n        var edge = cloneEdge.clone();\n        if (edge.data().source == cloneId) {\n          edge.data().source = node.id();\n          edge.data().portsource = node.id();\n        } else {\n          edge.data().target = node.id();\n          edge.data().porttarget = node.id();\n        }\n        cloneEdge.remove();\n        clone.remove();\n        cy.add(edge);\n      }\n      return node;\n    };\n    undoRedoActionFunctions.changeMapType = function (param) {\n      var result = {};\n      var currentMapType = elementUtilities.getMapType();\n      elementUtilities.setMapType(param.mapType);\n      result.mapType = currentMapType;\n      result.callback = param.callback;\n      param.callback();\n      return result;\n    };\n  }\n  return undoRedoActionFunctionsExtender;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/ur-action-functions-extender-factory.js\n");

/***/ }),

/***/ "./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash.isequal/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});